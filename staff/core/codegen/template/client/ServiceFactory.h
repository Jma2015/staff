// This file generated by staff_codegen
// DO NOT EDIT

#ifndef _SERVICEFACTORY_H_
#define _SERVICEFACTORY_H_

#include <typeinfo>
#include <rise/string/String.h>
#include <staff/security/Security.h>

//! service factory
class CServiceFactory
{
public:
  //!         get instance of service factory
  static CServiceFactory& Inst();

  //!         allocate new object for work with service
  /*! example:
      CCalculator* pCalculator = CServiceFactory::Inst().GetService<CCalculator>()

      \param  sSessionId - session identifier
      \param  sServiceName - service name
      \param  sHostName - axis2c host name or IP-Address
      \param  sHostPort - axis2c port
      \return pointer to object for work with service
      */
  template<typename TServiceClientBaseType>
  TServiceClientBaseType* GetService( const rise::CString& sSessionId = STAFF_SECURITY_GUEST_SESSION_ID,
                                      const rise::CString& sServiceName = "",
                                      const rise::CString& sHostName = "localhost",
                                      const rise::CString& sHostPort = "9090" )
  {
    return reinterpret_cast<TServiceClientBaseType*>(AllocateClient(typeid(TServiceClientBaseType).name(), sSessionId, sServiceName, sHostName, sHostPort));
  }

private:
  //! private constructor
  CServiceFactory();

  void* AllocateClient(const rise::CString& sClientType, const rise::CString& sSessionId, const rise::CString& sServiceName, const rise::CString& sHostName, const rise::CString& sHostPort);

private:
  static CServiceFactory* m_pInst;  //!< instance
};

#endif // _SERVICEFACTORY_H_
