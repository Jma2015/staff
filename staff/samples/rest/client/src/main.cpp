// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <iostream>
#include <memory>
#include <staff/utils/Log.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "Customers.h"

// callbacks

std::ostream& operator<<(std::ostream& rStream, const ::samples::rest::Customer& rCustomer)
{
  return rStream << rCustomer.nId << "\t\t" << rCustomer.sFirstName << "\t\t"
                 << rCustomer.sLastName << "\t\t" << rCustomer.nYear << std::endl;
}


std::ostream& operator<<(std::ostream& rStream, const ::samples::rest::CustomersList& rlsCustomers)
{
  std::cout << std::endl << "id\t\tf. name\t\tl. name\t\tyear" << std::endl;

  for (::samples::rest::CustomersList::const_iterator itCustomer = rlsCustomers.begin();
       itCustomer != rlsCustomers.end(); ++itCustomer)
  {
    rStream << *itCustomer;
  }
  return rStream;
}

int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  try
  {
    std::auto_ptr< ::samples::rest::Customers > pCustomers(
          ::staff::ServiceFactory::Inst().GetService< ::samples::rest::Customers >());

    STAFF_ASSERT(pCustomers.get(), "Cannot get client for service samples.rest.Customers!");

    // Invoke Your service here:
    ::samples::rest::Customer stCustomer;
    stCustomer.sFirstName = "John";
    stCustomer.sLastName = "Smith";
    stCustomer.nYear = 1970;
    int nId1 = pCustomers->Add(stCustomer);
    staff::LogInfo() << "Add result: " << nId1;

    stCustomer.sFirstName = "Mary";
    stCustomer.sLastName = "Brown";
    stCustomer.nYear = 1975;
    int nId2 = pCustomers->Add(stCustomer);
    staff::LogInfo() << "Add result: " << nId2;


    ::samples::rest::CustomersList tListResult = pCustomers->List();
    staff::LogInfo() << "List result: \n" << tListResult;


    staff::LogInfo() << "updating #" << nId2;
    *stCustomer.nId = nId2;
    stCustomer.nYear = 1980;
    pCustomers->Update(stCustomer);
    staff::LogInfo() << "Update called";


    ::samples::rest::Customer tGetResult = pCustomers->Get(nId2);
    staff::LogInfo() << "Get result: \n" << tGetResult;


    staff::LogInfo() << "deleting #" << nId1;
    try
    {
      pCustomers->Delete(nId1);
      staff::LogInfo() << "Delete called";
    }
    catch(...)
    {
      staff::LogWarning() << "THIS OPERATION MAY NOT WORK DUE TO AXIS2/C PROBLEM:\nhttps://issues.apache.org/jira/browse/AXIS2C-1418\n"
        "\nTo fix the problem install the patch from http://code.google.com/p/staff/downloads/detail?name=http_transport_utils.c.REST_DELETE.patch";
      throw;
    }


    tListResult = pCustomers->List();
    staff::LogInfo() << "Now list is: " << tListResult;

  }
  STAFF_CATCH_ALL

  return 0;
}

