// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <map>
#include <rise/common/MutablePtr.h>
#include <staff/common/Exception.h>
#include <staff/common/Operation.h>
#include <staff/common/Value.h>
#include "$(Interface.Name)Wrapper.h"
#include "$(Interface.Name)Context.h"
#include "$(Interface.Name)Impl.h"

#cginclude <common/Serialization.cpp>

#foreach $(Interface.Classes)

$(Class.OpeningNs)
class $(Class.Name)Wrapper::$(Class.Name)WrapperImpl
{
public:
  typedef rise::CMutablePtr< $(Class.Name)Impl > P$(Class.ServiceName)Impl;
  typedef std::map<std::string, P$(Class.ServiceName)Impl> TServiceMap;
  TServiceMap m_mServices;
  staff::CComponent* m_pComponent;
  static std::string m_sName;
  static std::string m_sDescr;
};

$(Class.Name)Wrapper::$(Class.Name)Wrapper(staff::CComponent* pComponent)
{
  m_pImpl = new $(Class.Name)WrapperImpl;
  m_pImpl->m_pComponent = pComponent;
}

$(Class.Name)Wrapper::$(Class.Name)Wrapper()
{
  m_pImpl = new $(Class.Name)WrapperImpl;
  m_pImpl->m_pComponent = NULL;
}

$(Class.Name)Wrapper::~$(Class.Name)Wrapper()
{
  if(m_pImpl != NULL)
  {
    delete m_pImpl;
    m_pImpl = NULL;
  }
}

$(Class.Name)Impl& $(Class.Name)Wrapper::ServiceImpl(const std::string& sID)
{
  return *$(Class.Name)Context::GetContext().GetServiceImpl(sID);
}

void $(Class.Name)Wrapper::Invoke( staff::COperation& rOperation, const std::string& sID )
{
  const staff::CDataObject& rRequest = rOperation.Request();
  staff::CDataObject& rResult = rOperation.Result();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rResult = GetServiceDescription();
  } else
#foreach $(Class.Members)
  if (sOperationName == "$(Member.Name)")
  {
    rOperation.SetResponseName("$(Member.Return.ResponseName)");
    rOperation.SetResultName("$(Member.Return.NodeName)");
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
    $(Param.DataType.Name) $(Param.Name);
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
    $(Param.DataType.Name) $(Param.Name);
#else
\
#ifeqend
#ifeqend
#end
\
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
    rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
    rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#else
\
#ifeqend
#ifeqend
#end
\
#ifeq($(Member.Return.Type),struct) // result value // !!struct!! 
    $(Member.Return.Name) tResult = \
#else
#ifeq($(Member.Return.Type),typedef)    // !!typedef!!
    $(Member.Return.Name) tResult = \
#else
#ifeq($(Member.Return.Type),generic)    // !!generic!!
#ifneq($(Member.Return.Name),void)      // !!not_void!!
    rOperation.ResultValue() = \
#else                                   // !!void!!
    \
#ifeqend
#else
#ifeq($(Member.Return.Type),string)    // !!string!!
    rOperation.ResultValue() = \
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
    staff::CDataObject tResultDO = \
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend // invoke an function
\
ServiceImpl(sID).$(Member.Name)(\
#foreach $(Member.Params)
#ifeq($(Param.$Num),0) // param splitter
\
#else
, \
#ifeqend // params
#ifeq($(Param.DataType.Type),generic)    // !!generic!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
*rRequest.GetChildByLocalName("$(Param.Name)").Begin()\
#else
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
$(Param.Name)\
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
$(Param.Name)\
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#end // end of funtion param list
);
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
    rOperation.Result().AppendChild(tResultDO);
#else
\
#ifeqend // end of function invokation
#ifeq($(Member.Return.Type),struct) // result for structs and types // !!struct!! 
    rResult << tResult;
#else
#ifeq($(Member.Return.Type),typedef)    // !!typedef!!
    rResult << tResult;
#else
\
#ifeqend
#ifeqend
  } else
#end
  {
    RISE_THROWS(staff::CRemoteException, "Unknown Operation: " + rOperation.GetName());
  }
}

const std::string& $(Class.Name)Wrapper::GetName() const
{
  if($(Class.Name)WrapperImpl::m_sName.size() == 0)
  {
    $(Class.Name)WrapperImpl::m_sName = "$(Class.ServiceName)";
  }
  
  return $(Class.Name)WrapperImpl::m_sName;
}

const std::string& $(Class.Name)Wrapper::GetDescr() const
{
  if($(Class.Name)WrapperImpl::m_sDescr.size() == 0)
  {
    $(Class.Name)WrapperImpl::m_sDescr = \
#ifneq($(Class.Description),)
"$(Class.Description)";
#else
"Staff service $(Class.ServiceName)";
#ifeqend
  }
  
  return $(Class.Name)WrapperImpl::m_sDescr;
}

const staff::CComponent* $(Class.Name)Wrapper::GetComponent() const
{
  return m_pImpl->m_pComponent;
}

staff::CComponent* $(Class.Name)Wrapper::GetComponent()
{
  return m_pImpl->m_pComponent;
}

void* $(Class.Name)Wrapper::GetImpl(const std::string& sID)
{
  return $(Class.Name)Context::GetContext().GetServiceImpl(sID);
}

rise::CStringList $(Class.Name)Wrapper::GetServiceIds() const
{
  return $(Class.Name)Context::GetContext().GetServiceIds();
}

staff::CDataObject $(Class.Name)Wrapper::GetOperations() const
{
  staff::CDataObject tOperations("Operations");

#foreach $(Class.Members)
  {// Operation: $(Member.Return.Name) $(Member.Name)($(Member.Params))$(Member.Const)
    staff::CDataObject tOp$(Member.Name) = tOperations.CreateChild("Operation");
    tOp$(Member.Name).CreateChild("Name", "$(Member.Name)");
    tOp$(Member.Name).CreateChild("IsConst", $(Member.IsConst));

    staff::CDataObject tOpReturn$(Member.Name) = tOp$(Member.Name).CreateChild("Return");
    tOpReturn$(Member.Name).CreateChild("Type", "$(Member.Return.Name)");
    tOpReturn$(Member.Name).CreateChild("IsConst", $(Member.Return.IsConst));

    staff::CDataObject tOp$(Member.Name)Params = tOp$(Member.Name).CreateChild("Parameters");
#foreach $(Member.Params)
    {
      staff::CDataObject tOpParam$(Param.Name) = tOp$(Member.Name)Params.CreateChild("Param");
      tOpParam$(Param.Name).CreateChild("Name", "$(Param.Name)");
      tOpParam$(Param.Name).CreateChild("Type", "$(Param.DataType.Name)");
      tOpParam$(Param.Name).CreateChild("IsConst", $(Param.DataType.IsConst));
      tOpParam$(Param.Name).CreateChild("IsRef", $(Param.DataType.IsRef));
    }
#end
  }
#end

  return tOperations;
}

staff::CDataObject $(Class.Name)Wrapper::GetServiceDescription() const
{
  staff::CDataObject tServiceDescription;
  staff::CDataObject tOperations = GetOperations();

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");
    
  tServiceDescription.CreateChild("Name", GetName());
  tServiceDescription.CreateChild("Description", GetDescr());
  
  tServiceDescription.AppendChild(tOperations);

  return tServiceDescription;
}

std::string $(Class.Name)Wrapper::$(Class.Name)WrapperImpl::m_sName;
std::string $(Class.Name)Wrapper::$(Class.Name)WrapperImpl::m_sDescr;

$(Class.EndingNs)
#end
