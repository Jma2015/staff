// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#ifneq($(Interface.Classes.$Count),0)
#include <memory>
#include <staff/common/Operation.h>
#include <staff/common/Exception.h>
#include <staff/common/Value.h>
#include <staff/client/ServiceFactory.h>
#include <staff/client/IProxyAllocator.h>
#include <staff/client/ICallback.h>
#include <rise/common/MutablePtr.h>
#else // types only interface
#include <staff/common/DataObject.h>
#include <staff/common/Value.h>
#ifeqend // #ifneq($(Interface.Classes.$Count),0)
#foreach $(Interface.Includes)
#include "$(Include.Name)Proxy.h"
#end
#include "$(Interface.Name)Proxy.h"

#cginclude <common/Serialization.cpp>

#ifneq($(Interface.Classes.$Count),0)
///////////////////////////////////////////////////////////////////////////////////////////////////////
// classes implementation

#foreach $(Interface.Classes)
$(Class.OpeningNs)

// proxy allocator
class $(Class.Name)ProxyAllocator: public staff::IProxyAllocator
{
public:
  $(Class.Name)ProxyAllocator()
  {
    try
    {
      staff::CServiceFactory::Inst().RegisterProxyAllocator(typeid($(Class.Name)).name(), *this);
    }
    catch(...)
    {
      rise::LogError() << "Failed to register proxy allocator $(Class.Name)";
    }
  }

  virtual staff::IService* AllocateProxy(const std::string& sServiceUri,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<$(Class.Name)Proxy> tpProxy(new $(Class.Name)Proxy);
    tpProxy->Init(sServiceUri, sSessionId, sInstanceId);
    return tpProxy.release();
  }

  virtual staff::IService* AllocateProxy(const std::string& sBaseUri,
                                         const std::string& sServiceName,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<$(Class.Name)Proxy> tpProxy(new $(Class.Name)Proxy);
    tpProxy->Init(sBaseUri + (sServiceName.empty() ? "$(Class.ServiceNsName)" : sServiceName),
                  sSessionId, sInstanceId);
    return tpProxy.release();
  }
};

$(Class.Name)ProxyAllocator t$(Class.Name)ProxyAllocatorInitializer;

// asynch proxies

#foreach $(Class.Members)
#ifneq($(Member.Params.$Count),0)
#foreach $(Member.Params)
#ifeq($(Param.DataType.Name),ICallback)
// asynch proxy for $(Class.Name)::$(Member.Name)
class $(Class.Name)$(Member.Name)AsynchCallProxy: public staff::ICallback<const staff::CDataObject&>
{
public:
  $(Class.Name)$(Member.Name)AsynchCallProxy($(Param.DataType) rCallback):
    m_rCallback(rCallback)
  {
  }

  virtual void OnComplete(const staff::CDataObject& rdoResponse)
  {
#var sResultName rdoResponse
#ifneq($(Member.Return.NodeName),)
#var sResultName rdoResponse.GetChildByLocalName("$(Member.Return.NodeName)")
#ifeqend
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),generic)    // generic
#ifneq($(Param.DataType.TemplateParams.TemplateParam1.NsName),void)      // non void
    m_rCallback.OnComplete($($sResultName).GetValue());
#else
    m_rCallback.OnComplete();
#ifeqend
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),string)    // string
    m_rCallback.OnComplete($($sResultName).GetText());
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),dataobject) // dataobject
    m_rCallback.OnComplete($($sResultName));
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),struct||typedef||template)
    $(Param.DataType.TemplateParams.TemplateParam1.NsName) tReturn;
    $($sResultName) >> tReturn;
    m_rCallback.OnComplete(tReturn);
#else
#cgerror "Callback result type = $(Param.DataType.TemplateParams.TemplateParam1.Type);"
#ifeqend // struct||typedef||template
#ifeqend // dataobject
#ifeqend // string
#ifeqend // generic
  }

  virtual void OnFault(const staff::CDataObject& rFault)
  {
    m_rCallback.OnFault(rFault);
  }

  virtual void Set(axis2_callback_t* pCallback, axutil_env_t* pEnv)
  {
    m_rCallback.Set(pCallback, pEnv);
  }

private:
  $(Param.DataType) m_rCallback;
};

#ifeqend // icallback
#end // member.params
#ifeqend // member.params
#end  // class.members

// service proxy
$(Class.Name)Proxy::$(Class.Name)Proxy()
{
}

$(Class.Name)Proxy::~$(Class.Name)Proxy()
{
  try
  {
    Deinit();
  }
  RISE_CATCH_ALL;
}

void $(Class.Name)Proxy::Init(const std::string& sServiceUri, const std::string& sSessionId, const std::string& sInstanceId)
{
  staff::IService::Init("$(Class.ServiceNsName)", sSessionId, sInstanceId);
  m_tClient.Init(!sServiceUri.empty() ? sServiceUri : \
#ifeq($(Class.ServiceUri),)
"http://localhost:9090/axis2/services/$(Class.ServiceNsName)"\
#else
"$(Class.ServiceUri)"\
#ifeqend
, sSessionId);
#ifneq($(Interface.TargetNamespace),)
  m_tClient.SetTargetNamespace("$(Interface.TargetNamespace)");
#ifeqend
  if (!staff::IService::GetInstanceId().empty())
  {
    staff::COperation tOperation("CreateInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(staff::IService::GetInstanceId());
    m_tClient.Invoke(tOperation);
    RISE_ASSERTES(!tOperation.IsFault(), staff::CRemoteException, tOperation.GetFaultString());
    m_tClient.SetInstanceId(sInstanceId);
  }
}

void $(Class.Name)Proxy::Deinit()
{
  if (!staff::IService::GetInstanceId().empty())
  {
    staff::COperation tOperation("FreeInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(staff::IService::GetInstanceId());
    m_tClient.Invoke(tOperation);
    RISE_ASSERTES(!tOperation.IsFault(), staff::CRemoteException, tOperation.GetFaultString());
  }
}

#foreach $(Class.Members)

$(Member.Return) $(Class.Name)Proxy::$(Member.Name)($(Member.Params))$(Member.Const)
{
#var tCallbackParamName
  staff::COperation tOperation(\
#ifneq($(Member.NodeName),)
"$(Member.NodeName)"\
#else
"$(Member.Name)"\
#ifeqend
, "$(Member.Return.ResponseName)", "$(Member.Return.NodeName)");

#ifneq($(Member.SoapAction),)
  tOperation.SetSoapAction("$(Member.SoapAction)");
#ifeqend
#ifneq($(Member.Params.$Count),0)
#foreach $(Member.Params)
#ifneq($(Param.DataType.Name),ICallback)
  staff::CDataObject tdoParam$(Param.Name) = tOperation.Request().CreateChild("$(Param.Name)");
#ifeq($(Param.DataType.Type),generic)    // !!generic!!
  tdoParam$(Param.Name).SetValue($(Param.Name));
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
  tdoParam$(Param.Name).SetText($(Param.Name));
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
  tdoParam$(Param.Name).AppendChild($(Param.Name));
#else
#ifeq($(Param.DataType.Type),struct||typedef||template)
  tdoParam$(Param.Name) << $(Param.Name);
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#else // ICallback
#ifneq($($tCallbackParamName),)
#cgerror Duplicate callback definition in "$(Class.Name)::$(Member.Name)"
#ifeqend
#var tCallbackParamName $(Param.Name)
#ifeqend
#end

#ifeqend
#ifeq($($tCallbackParamName),)
  // synchronous call
  m_tClient.Invoke(tOperation);
  RISE_ASSERTES(!tOperation.IsFault(), staff::CRemoteException, tOperation.GetFaultString());

#ifeq($(Member.Return.Type),generic)    // !!generic!!
#ifneq($(Member.Return.Name),void)      // !!void!!
  return const_cast<const staff::COperation&>(tOperation).ResultValue();
#ifeqend
#else
#ifeq($(Member.Return.Type),string)    // !!string!!
  return const_cast<const staff::COperation&>(tOperation).ResultValue();
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
  return tOperation.Result();
#else
#ifeq($(Member.Return.Type),struct||typedef||template)
  $(Member.Return.NsName) tReturn;
  tOperation.Result() >> tReturn;
  return tReturn;
#else
#cgerror "Member.Return.Type = $(Member.Return.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#else // is asynch
  // asynchronous call
  staff::PICallback tCallback(new $(Class.Name)$(Member.Name)AsynchCallProxy($($tCallbackParamName)));
  m_tClient.Invoke(tOperation, tCallback);
#ifeqend
}
#end
$(Class.EndingNs)
#end
#ifeqend // #ifneq($(Interface.Classes.$Count),0)

