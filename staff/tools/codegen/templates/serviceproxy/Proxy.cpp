// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#ifneq($(Interface.Classes.$Count),0)
#include <memory>
#include <staff/utils/SharedPtr.h>
#ifeqend
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#ifneq($(Interface.Classes.$Count),0)
#include <staff/common/Operation.h>
#include <staff/common/Exception.h>
#include <staff/component/ServiceWrapper.h>
#include <staff/component/SharedContext.h>
#ifeqend // #ifneq($(Interface.Classes.$Count),0)
#include "ServiceFactory.h"
#include "$(Interface.FilePath)$(Interface.Name)Proxy.h"

#cginclude <common/Serialization.cpp>

#ifneq($(Interface.Classes.$Count),0)
///////////////////////////////////////////////////////////////////////////////////////////////////////
// classes implementation

#foreach $(Interface.Classes)
$(Class.OpeningNs)


// service proxy
$(Class.Name)Proxy::$(Class.Name)Proxy(const std::string& sSessionId, const std::string& sInstanceId):
  m_pWrapper(NULL)
{
  staff::IService::Init("$(Class.ServiceNsName)", sSessionId, sInstanceId);
}

$(Class.Name)Proxy::~$(Class.Name)Proxy()
{
}

#foreach $(Class.Members)

$(Member.Return) $(Class.Name)Proxy::$(Member.Name)($(Member.Params))$(Member.Const)
{
  staff::Operation tOperation("$(Member.Options.*requestElement||Member.Name)"\
#ifneq($(Member.Options.*responseElement),)
, "$(Member.Options.*responseElement)"\
#ifneq($(Member.Options.*resultElement),)
#var bWriteResp 1
#ifeq($(Member.Return.Type),template)
#ifneq($(Member.Return.Name),Optional||Nillable)
#var bWriteResp 0
#ifeqend
#ifeqend
#ifeq($($bWriteResp),1)
, "$(Member.Options.*resultElement)"\
#ifeqend
#ifeqend
#ifeqend
);
\
#ifneq($(Member.Params.$Count),0)
  staff::DataObject& rdoRequest = tOperation.Request();
#foreach $(Member.Params)
#ifneq($(Param.DataType.Name),ICallback)
#context $(Param.DataType)
#var sParam $(Param.Name)
#var sParamName $(Param.Name)
#ifeq($(Param.Options.*useParentElement||Member.Options.*inlineRequestElement),)
#var sdoParam rdoRequest.CreateChild("$(Param.Name)")
#var sElementName
#else
#var sdoParam rdoRequest
#var sElementName $(Param.Options.*elementName||Param.Name)
#ifeqend
#cginclude <common/TypeSerialization.cpp>
#contextend
#ifeqend
#end // member.params

#ifeqend // Member.Params.$Count != 0
\
\
  GetServiceWrapper().Invoke(tOperation, GetSessionId(), GetInstanceId());
\
#ifneq($(Member.Return.Name),void)      // !!void!!

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
#ifneq($(Member.Return.Type),string||dataobject)
  $(Member.Return.NsName) tReturn\
#ifeq($(Member.Return.Type),generic)    // !!generic!!
 = 0\
#ifeqend
;
#ifeqend
\
#ifeq($(Member.Return.Type),string||dataobject)
  return \
#ifeqend
\
#context $(Member.Return)
#var sParam tReturn
#var sParamName
#var sdoParam rdoResult
#var sElementName $(Member.Options.*resultElement)
#cginclude <common/TypeDeserialization.cpp>
#contextend
#ifeq($(Member.Return.Type),struct||typedef||template||generic||enum)
  return tReturn\
#else
#ifneq($(Member.Return.Type),string||dataobject)
#cgerror "Member.Return.Name = $(Member.Return.Name);"
#ifeqend
#ifeqend
;
\
#ifeqend
}
#end

staff::ServiceWrapper& $(Class.Name)Proxy::GetServiceWrapper() const
{
  if (!m_pWrapper)
  {
    m_pWrapper = staff::SharedContext::Inst().GetService("$(Class.NsName.!dot)");
    STAFF_ASSERT(m_pWrapper, "Can't get service wrapper for service [$(Class.NsName.!dot)]");
  }

  return *m_pWrapper;
}

$(Class.EndingNs)
#end
#ifeqend // #ifneq($(Interface.Classes.$Count),0)

