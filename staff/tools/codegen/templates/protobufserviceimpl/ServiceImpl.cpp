// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/Event.h>
#include <staff/common/Exception.h>
#ifneq($($protobufEncoding),)
#include <staff/utils/CharsetConverter.h>
#ifeqend
#include "ProtobufConnector.h"
#foreach $(Interface.Includes)
#include "$(Include.FilePath)$(Include.Name)Impl.h"
#end
#include "$(Interface.FilePath)$(Interface.Name)Impl.h"

#indent +
#ifneq($(Interface.Enums.$Count),0)
///////////////////////////////////////////////////////////////////////////////////////////////////////
// enums
#foreach $(Interface.Enums)
#ifeq($(Enum.Extern),false) // do not serialize extern type
#cginclude "EnumSerialization.cpp"
#ifeqend
#end

#ifeqend
#ifneq($(Interface.Structs.$Count),0)
///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators
#foreach $(Interface.Structs)
#cginclude "StructSerialization.cpp"
#end

#ifeqend // Interface.Structs.$Count != 0
#indent -

#foreach $(Interface.Classes)
$(Class.OpeningNs)
#indent +

$(Class.Name)Impl::$(Class.Name)Impl()
{
}

$(Class.Name)Impl::~$(Class.Name)Impl()
{
}

#foreach $(Class.Members)
$(Member.Return.UsedName) $(Class.Name)Impl::$(Member.Name)($(Member.Params))$(Member.Const)
{
#ifneq($(Member.Return.Type),struct)
#cgerror Return type of $(Class.Name)Impl::$(Member.Name) is not struct
#ifeqend
#ifneq($(Member.Params.$Count),1)
#cgerror Arguments count of $(Class.Name)Impl::$(Member.Name) != 1
#ifeqend
#ifneq($(Member.Params.Param.DataType.Type),struct)
#cgerror Argument type of $(Class.Name)Impl::$(Member.Name) is not struct
#ifeqend
  $(Member.Return.UsedName) tResult;

  // create connector and protobuf service
  $(Project.Namespace)ProtobufConnector tProtobufConnector;
  tProtobufConnector.Create($(Class.NsName.!deprefix/$($rootns)/)::descriptor());

  ::google::protobuf::RpcController* pProtobufController = tProtobufConnector.GetController();
  ::google::protobuf::RpcChannel* pProtobufChannel = tProtobufConnector.GetChannel();

  STAFF_ASSERT(pProtobufController, "Protobuf controller is not initialized");
  STAFF_ASSERT(pProtobufChannel, "Protobuf channel is not initialized");

  $(Class.NsName.!deprefix/$($rootns)/)::Stub tProtobufService(pProtobufChannel);

  // make request
  ::staff::Event tEvent;
  $(Member.Params.Param.DataType.NsName.!deprefix/$($rootns)/) tProtoRequest;
  $(Member.Return.NsName.!deprefix/$($rootns)/) tProtoResponse;

  tProtoRequest << request;

  tProtobufService.$(Member.Name)(pProtobufController, &tProtoRequest, &tProtoResponse,
      ::google::protobuf::NewCallback(&tEvent, &staff::Event::Signal));
  STAFF_ASSERT(tEvent.Wait($(Project.Namespace)ProtobufConnector::ProtobufRequestTimeout),
               "Timeout while waiting response from protobuf service");

  tResult << tProtoResponse;

  return tResult;  // result
}

#end // foreach Class.Members

#indent -
$(Class.EndingNs)
#end
