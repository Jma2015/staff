// This file generated by staff_codegen
// Service Implementation

#include <staff/security/Security.h>
#include <staff/common/Exception.h>
#include <rise/common/exmacros.h>
#include <rise/common/ExceptionTemplate.h>
#include "LoginContext.h"
#include "LoginImpl.h"

namespace staff
{

  CLoginImpl::~CLoginImpl()
  {
  }

  std::string CLoginImpl::Login(const std::string& sUserName, const std::string& sPassword)
  {
    const std::string& sCurrentSessionId = GetSessionID();
    std::string tResult;
    char szSessionId[33];

    RISE_ASSERTES(sCurrentSessionId == STAFF_SECURITY_GUEST_SESSION_ID,
      rise::CLogicAlreadyExistsException, 
      "Невозможно произвести регистрацию из не анонимной сессии");
    
    if(!StaffSecurityOpenSession(sUserName.c_str(), sPassword.c_str(), szSessionId, sizeof(szSessionId)))
    {
      RISE_THROWS(staff::CRemoteException, "Ошибка открытия сессии");
    }

    tResult.assign(szSessionId);

    return tResult;  // result
  }

  std::string CLoginImpl::OpenExtraSession(int nExtraSessionId)
  {
    const std::string& sCurrentSessionId = GetSessionID();
    std::string tResult;
    char szSessionId[33];

    RISE_ASSERTES(sCurrentSessionId != STAFF_SECURITY_GUEST_SESSION_ID,
      rise::CLogicAlreadyExistsException, 
      "Невозможно произвести открытие дополнительной сессии из анонимной сессии");
    
    if(!StaffSecurityOpenExtraSession(sCurrentSessionId.c_str(), nExtraSessionId, szSessionId, sizeof(szSessionId)))
    {
      RISE_THROWS(staff::CRemoteException, "Ошибка открытия дополнительной сессии");
    }

    tResult.assign(szSessionId);

    return tResult;  // result
  }

  void CLoginImpl::Logout()
  {
    const std::string& sCurrentSessionId = GetSessionID();
    RISE_ASSERTES(sCurrentSessionId != STAFF_SECURITY_GUEST_SESSION_ID, 
      rise::CLogicAlreadyExistsException, 
      "Невозможно закрыть гостевую сессию");

    if(!StaffSecurityCloseSession(m_sSessionId.c_str()))
    {
      RISE_THROWS(staff::CRemoteException, "Ошибка закрытия сессии");
    }

//    m_sSessionId = STAFF_SECURITY_GUEST_SESSION_ID;
  }

  void CLoginImpl::KeepAliveSession()
  {
    if(!StaffSecurityKeepAliveSession(m_sSessionId.c_str()))
    {
      RISE_THROWS(staff::CRemoteException, "Ошибка продолжения сессии");
    }
  }

  std::string CLoginImpl::GetUserName()
  {
    char szUserName[128];
    std::string tResult;
    if(!StaffSecurityGetUserNameBySessionId(m_sSessionId.c_str(), szUserName, sizeof(szUserName)))
    {
      RISE_THROWS(staff::CRemoteException, "Ошибка получения имени пользователя");
    }

    tResult.assign(szUserName);

    return tResult;  // result
  }

  int CLoginImpl::GetSessionExpiration() const
  {
    return StaffSecurityGetSessionExpiration();
  }

  bool CLoginImpl::ValidateSession()
  {
    return StaffSecurityValidateSessionID(GetSessionID().c_str());
  }

  const std::string& CLoginImpl::GetSessionID()
  {
    if(m_sSessionId.size() == 0)
      m_sSessionId = CLoginContext::GetContext().GetServiceID(this);
    return m_sSessionId;
  }

}

