// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <memory>
#include <rise/common/Log.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceClient.h>
#include <staff/client/Options.h>
#include <staff/client/ServiceFactory.h>
#include "Echo.h"

// callbacks


int main(int nArgs, const char* paszArgs[])
{
  std::string sHttpUserName = "";
  std::string sHttpPassword = "";
  std::string sProxyUserName = "";
  std::string sProxyPassword = "";
  std::string sAddress = "http://localhost:9090/axis2/services/echo/echoString";

  if (nArgs > 1)
  {
    if (strcmp(paszArgs[1], "-h") == 0)
    {
      std::cerr << "Usage: " << paszArgs[0] << "(-a [USERNAME] [PASSWORD]) (-p [USERNAME] [PASSWORD]) [ENDPOINT_URL]" << std::endl
                << "use -a option for HTTP Authentication" << std::endl
                << "use -p option for Proxy Authentication" << std::endl;
      return 0;
    }

    for (int nArg = 1; nArg < nArgs; ++nArg)
    {
      if (strcmp(paszArgs[nArg], "-a"))
      { // http auth
        ++nArg;
        if (paszArgs[nArg] == NULL)
        {
          std::cerr << "username for http auth is not set!" << std::endl;
          return 1;
        }

        sHttpUserName = paszArgs[nArg];

        ++nArg;
        if (paszArgs[nArg] == NULL)
        {
          std::cerr << "password for http auth is not set!" << std::endl;
          return 1;
        }

        sHttpPassword = paszArgs[nArg];
      }
      else
      if (strcmp(paszArgs[nArg], "-p"))
      { // proxy auth
        ++nArg;
        if (paszArgs[nArg] == NULL)
        {
          std::cerr << "username for proxy auth is not set!" << std::endl;
          return 1;
        }

        sProxyUserName = paszArgs[nArg];

        ++nArg;
        if (paszArgs[nArg] == NULL)
        {
          std::cerr << "password for proxy auth is not set!" << std::endl;
          return 1;
        }

        sProxyPassword = paszArgs[nArg];
      }
      else
      {
        sAddress = paszArgs[nArg];
      }
    }
  }

  std::cout << "Using address: " << sAddress << std::endl;

  try
  {
    std::auto_ptr< Echo > pEcho(::staff::ServiceFactory::Inst().GetService< Echo >(sAddress));

    RISE_ASSERTS(pEcho.get(), "Cannot get client for service samples.Echo!");

    // get service client to set REST method
    staff::ServiceClient* pClient = pEcho->GetClient();
    RISE_ASSERTS(pClient, "Cannot get ServiceClient");
    staff::Options& rOptions = pClient->GetOptions();



    // testing auth is needed or not
    bool bHttpAuthRequired = false;
    bool bProxyAuthRequired = false;

    // setting rest method
    rOptions.EnableRest();
    rOptions.SetHttpMethod("HEAD");

    // setting dummy auth info
    if (!sHttpUserName.empty() && !sHttpPassword.empty())
    {
      rOptions.SetHttpAuthInfo("", "", "");
    }
    if (!sProxyUserName.empty() && !sProxyPassword.empty())
    {
      rOptions.SetProxyAuthInfo("", "", "");
    }

    // force authentication tests
    rOptions.SetTestHttpAuth(true);
    rOptions.SetTestProxyAuth(true);

    // uncomment line below to setup proxy server from code
    // pClient->SetProxyWithAuth("127.0.0.1", "3128", "username", "password");

    // sending robust authentication test message
    pClient->TestAuthRequired();

    // checking whether authentication is required
    if (pClient->GetHttpAuthRequired())
    {
      bHttpAuthRequired = true;
      std::cout << "Using http auth: [" << sHttpUserName << ":" << sHttpPassword << "]" << std::endl;
      rOptions.SetHttpAuthInfo(sHttpUserName, sHttpPassword, pClient->GetAuthType());
      pClient->TestAuthRequired();
    }

    if (pClient->GetProxyAuthRequired())
    {
      bProxyAuthRequired = true;
      std::cout << "Using proxy auth: [" << sProxyUserName << ":" << sProxyPassword << "]" << std::endl;
      rOptions.SetProxyAuthInfo(sProxyUserName, sProxyPassword, pClient->GetAuthType());
      pClient->TestAuthRequired();
    }

    // cancel authentication tests
    rOptions.SetTestHttpAuth(false);
    rOptions.SetTestProxyAuth(false);

    // print whether authentication was required
    std::cout << "HTTP Authentication " << (bHttpAuthRequired ? "info" : "is not") << " required." << std::endl;
    std::cout << "Proxy Authentication " << (bProxyAuthRequired ? "info" : "is not") << " required." << std::endl;

    // disabling REST for SOAP request
    rOptions.EnableRest(false);
    rOptions.SetHttpMethod("POST");


    // sending request

    std::string tEchoStringResult = pEcho->EchoString("Hello World!");
    rise::LogInfo() << "EchoString result: " << tEchoStringResult;
  }
  RISE_CATCH_ALL

  return 0;
}

