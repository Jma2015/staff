// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

package samples.calc;

import java.io.*;

import org.ksoap2.*;
import org.ksoap2.transport.*;
import org.kxml2.kdom.*;
import org.xmlpull.v1.*;


public class CalcService
{
  private HttpTransport m_tTransport;
  private String m_sTargetNamespace;
  private String m_sServiceUri;
  private String m_sSessionId;
  private String m_sInstanceId;

  // constructor
  public CalcService(String sServiceUri, String sSessionId, String sInstanceId, String sTargetNamespace)
  {
    Init(sServiceUri, sSessionId, sInstanceId, sTargetNamespace);
  }

  public CalcService(String sServiceUri)
  {
    Init(sServiceUri, null, null, null);
  }

  public CalcService()
  {
    Init(null, null, null, null);
  }

  protected void Init(String sServiceUri, String sSessionId, String sInstanceId, String sTargetNamespace)
  {
    if (sServiceUri == null || sServiceUri == "")
    {
      sServiceUri = "http://localhost:9090/axis2/services/samples.calc.CalcService";
    }

    if (sTargetNamespace == null || sTargetNamespace == "")
    {
      sTargetNamespace = "http://tempui.org/samples.calc.CalcService";
    }

    m_tTransport = new HttpTransport(sServiceUri);
    m_sTargetNamespace = sTargetNamespace;
    m_sServiceUri = sServiceUri;
    m_sSessionId = sSessionId;
    m_sInstanceId = sInstanceId;
  }

  public String GetTargetNamespace()
  {
    return m_sTargetNamespace;
  }

  public String GetServiceUri()
  {
    return m_sServiceUri;
  }

  public String GetSessionId()
  {
    return m_sSessionId;
  }

  public String GetInstanceId()
  {
    return m_sInstanceId;
  }


  public int Add(int nA, int nB) throws IOException, RuntimeException, XmlPullParserException
  {
    // create envelope
    SoapEnvelope tEnvelope = new SoapEnvelope(SoapEnvelope.VER10);

    // build request
    Element tRequestElement = new Node().createElement(m_sTargetNamespace, "Add");

    Element tParamnA = tRequestElement.createElement("", "nA");
    tParamnA.addChild(Node.TEXT, "" + nA);
    tRequestElement.addChild(Node.ELEMENT, tParamnA);

    Element tParamnB = tRequestElement.createElement("", "nB");
    tParamnB.addChild(Node.TEXT, "" + nB);
    tRequestElement.addChild(Node.ELEMENT, tParamnB);

    tEnvelope.bodyOut = tRequestElement;

    m_tTransport.call(null, tEnvelope);

    // parse response
    Node tResultNode = (Node)tEnvelope.bodyIn;
    if (tResultNode.getElement(0).getName() == "Fault")
    {
      throw new RuntimeException("Soap Fault received: " + tResultNode.toString());
    }

    Element tResultElement = tResultNode.getElement(m_sTargetNamespace, "AddResult");

    return Integer.parseInt(tResultElement.getText(0));
  }

  public int Sub(int nA, int nB) throws IOException, RuntimeException, XmlPullParserException
  {
    // create envelope
    SoapEnvelope tEnvelope = new SoapEnvelope(SoapEnvelope.VER10);

    // build request
    Element tRequestElement = new Node().createElement(m_sTargetNamespace, "Sub");

    Element tParamnA = tRequestElement.createElement("", "nA");
    tParamnA.addChild(Node.TEXT, "" + nA);
    tRequestElement.addChild(Node.ELEMENT, tParamnA);

    Element tParamnB = tRequestElement.createElement("", "nB");
    tParamnB.addChild(Node.TEXT, "" + nB);
    tRequestElement.addChild(Node.ELEMENT, tParamnB);

    tEnvelope.bodyOut = tRequestElement;

    m_tTransport.call(null, tEnvelope);

    // parse response
    Node tResultNode = (Node)tEnvelope.bodyIn;
    if (tResultNode.getElement(0).getName() == "Fault")
    {
      throw new RuntimeException("Soap Fault received: " + tResultNode.toString());
    }

    Element tResultElement = tResultNode.getElement(m_sTargetNamespace, "SubResult");

    return Integer.parseInt(tResultElement.getText(0));
  }

  public void SetMem(int nMem) throws IOException, RuntimeException, XmlPullParserException
  {
    // create envelope
    SoapEnvelope tEnvelope = new SoapEnvelope(SoapEnvelope.VER10);

    // build request
    Element tRequestElement = new Node().createElement(m_sTargetNamespace, "SetMem");

    Element tParamnMem = tRequestElement.createElement("", "nMem");
    tParamnMem.addChild(Node.TEXT, "" + nMem);
    tRequestElement.addChild(Node.ELEMENT, tParamnMem);

    tEnvelope.bodyOut = tRequestElement;

    m_tTransport.call(null, tEnvelope);
  }

  public int GetMem() throws IOException, RuntimeException, XmlPullParserException
  {
    // create envelope
    SoapEnvelope tEnvelope = new SoapEnvelope(SoapEnvelope.VER10);

    // build request
    Element tRequestElement = new Node().createElement(m_sTargetNamespace, "GetMem");

    tEnvelope.bodyOut = tRequestElement;

    m_tTransport.call(null, tEnvelope);

    // parse response
    Node tResultNode = (Node)tEnvelope.bodyIn;
    if (tResultNode.getElement(0).getName() == "Fault")
    {
      throw new RuntimeException("Soap Fault received: " + tResultNode.toString());
    }

    Element tResultElement = tResultNode.getElement(m_sTargetNamespace, "GetMemResult");

    return Integer.parseInt(tResultElement.getText(0));
  }
}

