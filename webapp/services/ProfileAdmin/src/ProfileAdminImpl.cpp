// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Service Implementation

#include <rise/xml/XMLDocument.h>
#include <rise/xml/XMLNode.h>
#include <staff/common/Runtime.h>
#include "ProfileAdminImpl.h"

namespace webapp
{
namespace admin
{

CProfileAdminImpl::CProfileAdminImpl()
{
}

CProfileAdminImpl::~CProfileAdminImpl()
{
}

::webapp::admin::TProfileList CProfileAdminImpl::GetProfiles()
{
  ::webapp::admin::TProfileList tResult;
  rise::xml::CXMLDocument tDoc;

  tDoc.LoadFromFile(m_sProfilesPath + "baseprofiles.xml");

  const rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  for (rise::xml::CXMLNode::TXMLNodeConstIterator itNodeProfile = rNodeRoot.NodeBegin();
      itNodeProfile != rNodeRoot.NodeEnd(); ++itNodeProfile)
  {
    const rise::xml::CXMLNode& rNodeProfile = *itNodeProfile;
    if (rNodeProfile.NodeType() == rise::xml::CXMLNode::ENTGENERIC && rNodeProfile.NodeName() == "Profile")
    {
      SProfile stProfile;
      stProfile.sId = rNodeProfile["Id"].AsString();
      stProfile.sName = rNodeProfile["Name"].AsString();

      const std::string& sIsAdmin = (*itNodeProfile)["IsAdmin"].AsString();
      stProfile.bIsAdmin = sIsAdmin == "true" || sIsAdmin == "1";

      const rise::xml::CXMLNode& rNodeWidgets = rNodeProfile.Subnode("Widgets");

      for (rise::xml::CXMLNode::TXMLNodeConstIterator itNodeWidget = rNodeWidgets.NodeBegin();
          itNodeWidget != rNodeWidgets.NodeEnd(); ++itNodeWidget)
      {
        if (itNodeWidget->NodeType() == rise::xml::CXMLNode::ENTGENERIC && itNodeWidget->NodeName() == "Widget")
        {
          stProfile.lsWidgets.push_back(itNodeWidget->NodeContent().AsString());
        }
      }
      tResult.push_back(stProfile);
    }
  }

  return tResult;  // result
}

::webapp::admin::TWidgetList CProfileAdminImpl::GetWidgets()
{
  ::webapp::admin::TWidgetList tResult;
  rise::xml::CXMLDocument tDoc;

  tDoc.LoadFromFile(m_sProfilesPath + "widgets.xml");

  const rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  for (rise::xml::CXMLNode::TXMLNodeConstIterator itNodeWidget = rNodeRoot.NodeBegin();
      itNodeWidget != rNodeRoot.NodeEnd(); ++itNodeWidget)
  {
    const rise::xml::CXMLNode& rNodeWidget = *itNodeWidget;
    if (rNodeWidget.NodeType() == rise::xml::CXMLNode::ENTGENERIC && rNodeWidget.NodeName() == "Widget")
    {
      SWidget stWidget;
      stWidget.sClass = rNodeWidget["Class"].AsString();
      stWidget.sName = rNodeWidget["Name"].AsString();
      tResult.push_back(stWidget);
    }
  }

  return tResult;  // result
}

void CProfileAdminImpl::RemoveProfile(const std::string& sId)
{
  rise::xml::CXMLDocument tDoc;

  tDoc.LoadFromFile(m_sProfilesPath + "baseprofiles.xml");

  rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  for (rise::xml::CXMLNode::TXMLNodeIterator itNodeProfile = rNodeRoot.NodeBegin();
      itNodeProfile != rNodeRoot.NodeEnd(); ++itNodeProfile)
  {
    rise::xml::CXMLNode& rNodeProfile = *itNodeProfile;
    if (rNodeProfile.NodeType() == rise::xml::CXMLNode::ENTGENERIC &&
        rNodeProfile.NodeName() == "Profile" &&
        rNodeProfile["Id"].AsString() == sId)
    {
      rNodeRoot.DelSubNode(itNodeProfile);
      tDoc.SaveToFile(m_sProfilesPath + "baseprofiles.xml");
      break;
    }
  }
}

void CProfileAdminImpl::SetProfile(const ::webapp::admin::SProfile& rProfile)
{
  rise::xml::CXMLDocument tDoc;

  tDoc.LoadFromFile(m_sProfilesPath + "baseprofiles.xml");

  rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  rise::xml::CXMLNode* pNodeProfile = NULL;

  for (rise::xml::CXMLNode::TXMLNodeIterator itNodeProfile = rNodeRoot.NodeBegin();
       itNodeProfile != rNodeRoot.NodeEnd(); ++itNodeProfile)
  {
    rise::xml::CXMLNode& rNodeProfile = *itNodeProfile;
    if (rNodeProfile.NodeType() == rise::xml::CXMLNode::ENTGENERIC &&
        rNodeProfile.NodeName() == "Profile" &&
        rNodeProfile["Id"].AsString() == rProfile.sId)
    {
      pNodeProfile = &*itNodeProfile;
      break;
    }
  }

  if (!pNodeProfile)
  {
    pNodeProfile = &rNodeRoot.AddSubNode("Profile");
  }
  else
  {
    pNodeProfile->Clear();
  }

  pNodeProfile->AddSubNode("Id").NodeContent() = rProfile.sId;
  pNodeProfile->AddSubNode("Name").NodeContent() = rProfile.sName;
  pNodeProfile->AddSubNode("IsAdmin").NodeContent() = rProfile.bIsAdmin ? "true" : "false";

  rise::xml::CXMLNode& rNodeWidgets = pNodeProfile->AddSubNode("Widgets");

  for (TStringList::const_iterator itWidget = rProfile.lsWidgets.begin();
        itWidget != rProfile.lsWidgets.end(); ++itWidget)
  {
    rNodeWidgets.AddSubNode("Widget").NodeContent() = *itWidget;
  }

  tDoc.SaveToFile(m_sProfilesPath + "baseprofiles.xml");
}

std::string CProfileAdminImpl::m_sProfilesPath = staff::CRuntime::Inst().GetComponentHome("widget") + "/db/";

}
}

