#summary Example: creating a Calculator Service under Windows using Visual Studio 2005

<h1>Table of Contents</h1>
<wiki:toc max_depth="2" />

== 1. Creating solution ==

Start Visual Studio and create new solution, named "component".

Append "\Calculator" to Location field.

While creating solution use template Win32=>Win32 Console Application, Click "OK".
Click "Next".

In "Application Settings" dialog select "DLL" and "Empty project", Click "Finish".

Solution is created.

Now click on "component" project and rename it to "samples.Calculator". 

This manipulations is needed to create given directory structure.


== 2. Creating service interface ==

  _Service interface is a C++ header file that contains a class, which provides a set of functions(service operations). Interface can also contain a set of structures and typedefs that will be used to interact with the service._

In created solution right click to "Header Files" and select "Add" => "New Item".

Click "Code" => "Header File (.h)".

Enter name "Calculator.h" and add "\src" at end of Location.

Copy and paste this code:
{{{
#ifndef _WS_CALCULATOR_H_
#define _WS_CALCULATOR_H_

#include <staff/common/IService.h>

namespace samples
{
  //! Calculator service
  class Calculator: public staff::IService
  {
  public:
    //! virtual destructor
    virtual ~Calculator() {}

    //! Add operation
    /*! \param nA - first argument
        \param nB - second argument
        \return nA + nB result
    */
    virtual int Add(int nA, int nB) = 0;

    //! Sub operation
    /*! \param nA - first argument
        \param nB - second argument
        \return nA - nB result
    */
    virtual int Sub(int nA, int nB) = 0;
  };
}

#endif // #ifndef _WS_CALCULATOR_H_

}}}

== 3. Creating service skeleton ==

To generate service's skeleton start command prompt from Calculator\component\src directory and enter:
{{{
staff_codegen -tserviceimpl Calculator.h
}}}

Service's skeleton will be generated in files:
{{{
CalculatorImpl.cpp
CalculatorImpl.h
}}}

Add these files into Solution:

Right click to "samples.Calculator" project, select "Add" => "Existing Item...".

In opened dialog go inside "src" directory and select !CalculatorImpl.cpp and !CalculatorImpl.h files.

Click "Add".

== 4. Implementing Calculator service ==

To realize service implementation, edit !CalculatorImpl.cpp.

Implement functions Add and Sub as follows:
{{{
int CalculatorImpl::Add(int nA, int nB)
{
  return nA + nB;
}

int CalculatorImpl::Sub(int nA, int nB)
{
  return nA - nB;
}

}}}


== 5. Generating component service wrapper ==

  _Component service wrapper is a set of files used to register class as service_

To generate wrapper start command prompt from Calculator\component\src directory and enter:
{{{
staff_codegen -tcomponent Calculator.h
}}}

These files will be generated:
{{{
CalculatorWrapper.h
CalculatorWrapper.cpp
ComponentImpl.h
ComponentImpl.cpp
}}}

Add these files into Solution:

Right click to samples.Calculator project, select "Add" => "Existing Item...".
In opened dialog go inside "src" directory and add select !CalculatorWrapper.h !CalculatorWrapper.cpp !ComponentImpl.h !ComponentImpl.cpp.

Click "Add".staff_codegen -tcomponent -csrc -u Calculator.h
staff_codegen -twsdl -isrc -o$(ConfigurationName) -u Calculator.h

_Notice: Don't include this files in the source code archive/CVS. This files must generated automaticaly while project build started._

== 6. Compilation ==

Go to Project Settings: Right click to "samples.Calculator" project and select "Properties".

Click to Configuration Drop down box and select "All configurations"

In the "Configuration properties" tree select "C/C++" item and enter these "Additional Include Directories":
{{{
$(STAFF_HOME)\include
}}}
Click "Apply".

In the "Configuration properties" tree open "Linker" subtree and click "Input".
Fill in the "Additional Dependencies" field as follows:
{{{
staff_component.lib staff_common.lib rise.lib
}}}
Click "Apply".

In the "Linker" subtree click "General" item.
Fill in the "Additional Library Directories" field as follows:
{{{
$(STAFF_HOME)\lib
}}}
Click "OK".

In the "Build Events" subtree click "Pre-Build Event" and fill in the "Command Line" field as follows:
{{{
staff_codegen -tcomponent -csrc -u Calculator.h
staff_codegen -twsdl -isrc -o$(ConfigurationName) -u Calculator.h
}}}

Set active solution configuration to release:

Click "Build" => "Configuration manager". Click "Active solution configuration" dropdown box and select "Release". Click "Close".

Compile the solution: "Build" => "Build Solution".

== 7. Installation ==
Open text editor and create file install.cmd in Calculator\component directory.
Copy and paste this code:
{{{
set installdir=%STAFF_HOME%\components\samples
if not exist %installdir% mkdir %installdir%
xcopy /Y /S Release\*.dll %installdir%
xcopy /Y /S Release\*.wsdl %installdir%
}}}

Start install.cmd file to install component.

== 8. Starting ==
Start command prompt from c:\ws\axis2c\bin directory and enter:
{{{
axis2_http_server
}}}

Open The Web browser and go to address: http://localhost:9090/axis2/services

Your new service must shown as:

||<font face="courier"><h3><u>samples.Calculator</u></h3><p>Calculator service <sup><a style="font-size: x-small;">{{{[}}}[http://localhost:9090/axis2/services/samples.Calculator?wsdl wsdl]{{{]}}}</a></sup></p><i>Available Operations</i> <ul><li>Add</li><li>Sub</li></ul></font>||

== 9. Service's source directory structure ==

Here is a described source directory tree of the Calculator service component.
{{{
Calculator\component\Release                    -- output: service library and wsdl
Calculator\component\src                        -- source files
Calculator\component\src\Calculator.h           -- service interface
Calculator\component\src\CalculatorImpl.h       -- service implementation(header)
Calculator\component\src\CalculatorImpl.cpp     -- service implementation
Calculator\component\src\CalculatorWrapper.h    -- autogenerated service wrapper(header)
Calculator\component\src\CalculatorWrapper.cpp  -- autogenerated service wrapper
Calculator\component\src\ComponentImpl.h        -- autogenerated component implementation (header)
Calculator\component\src\ComponentImpl.cpp      -- autogenerated component implementation
Calculator\component\component.vcproj           -- visual studio project file
Calculator\component\component.sln              -- visual studio solution file
}}}

== 10. Create Calculator client ==

To learn how to create service's client please read ExampleCalculatorClientWindows

== 11. Download source code ==

*[http://staff.googlecode.com/files/samples.CalculatorComponent.7z Download]* source code of the Calculator service.
