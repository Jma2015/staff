#summary C++/C SOA Frameworks codegenerator capabilities overview

= Summary =

This document is an overview of codegenerators provided by open source Web Services Frameworks in contrast to WSF Staff.

== Command lines to generate complete client from WSDL ==

|| *WSF Staff*    || `staff_codegen -pwsdl -tclient_all Calculator.wsdl` ||
|| *Axis2/C*      || `$AXIS2_HOME/bin/WSDL2C.sh -uri Calculator.wsdl -u -uw` ||
|| *WSF C++ WSO2* || `$WSO2_HOME/bin/tools/codegen/wsdl2cpp/WSDL2CPP.sh -uri Calculator.wsdl -u -uw` ||
|| *gSoap*        || `wsdl2h Calculator.wsdl<br>soapcpp2 Calculator.h -I/usr/include/gsoap` ||

== Generated files list ==

|| *WSF Staff*        || *Axis2/C*      || *WSF C++ WSO2* || *gSoap*        ||
|| src/Calculator.h<br>src/!CalculatorProxy.h <font color="red" size="2">`*`</font><br>src/!CalculatorProxy.cpp <font color="red" size="2">`*`</font><br>src/main.cpp<br>Makefile<br>codegen.cmd<br>Calculator.vcproj<br>Calculator.pro || src/adb_add.c<br>src/adb_add.h<br>src/adb_addResponse.c<br>src/adb_addResponse.h<br>src/adb_div.c<br>src/adb_div.h<br>src/adb_divResponse.c<br>src/adb_divResponse.h<br>src/adb_mul.c<br>src/adb_mul.h<br>src/adb_mulResponse.c<br>src/adb_mulResponse.h<br>src/adb_sub.c<br>src/adb_sub.h<br>src/adb_subResponse.c<br>src/adb_subResponse.h<br>src/axis2_extension_mapper.c<br>src/axis2_extension_mapper.h<br>src/axis2_stub_Calculator.c<br>src/axis2_stub_Calculator.h<br>src/!CalculatorClient.vcproj || src/Add.cpp<br>src/Add.h<br>src/!AddResponse.cpp<br>src/!AddResponse.h<br>src/!CalculatorClient.vcproj<br>src/!CalculatorStub.cpp<br>src/!CalculatorStub.h<br>src/Div.cpp<br>src/Div.h<br>src/!DivResponse.cpp<br>src/!DivResponse.h<br>src/ICalculatorCallback.h<br>src/Mul.cpp<br>src/Mul.h<br>src/!MulResponse.cpp<br>src/!MulResponse.h<br>src/Sub.cpp<br>src/Sub.h<br>src/!SubResponse.cpp<br>src/!SubResponse.h || Calculator.h<br>!CalculatorSoapBinding.add.req.xml<br>!CalculatorSoapBinding.add.res.xml<br>!CalculatorSoapBinding.div.req.xml<br>!CalculatorSoapBinding.div.res.xml<br>!CalculatorSoapBinding.mul.req.xml<br>!CalculatorSoapBinding.mul.res.xml<br>!CalculatorSoapBinding.nsmap<br>!CalculatorSoapBinding.sub.req.xml<br>!CalculatorSoapBinding.sub.res.xml<br>soapCalculatorSoapBindingObject.h<br>soapCalculatorSoapBindingProxy.h<br>soapC.cpp<br>soapClient.cpp<br>soapClientLib.cpp<br>soapH.h<br>soapServer.cpp<br>soapServerLib.cpp<br>soapStub.h<br> ||

_<font color="red" size="2">`*`</font> files will be generated during build process._

== Command lines to compile client using GCC ==

|| *WSF Staff*        || <font color="green" size="1">using GNU Make:</font><br>`make`<br/><font color="green" size="1">*or* using shadow build with qmake and GNU Make:</font><br>`mkdir -p ../calculator-shadow && cd ../calculator-shadow && qmake ../calculator && make` ||
|| *Axis2/C*      || <font color="green" size="1">Makefile is not provided. Command line to compile client:</font><br>`gcc -o calculator_client src/*.c -I$AXIS2C_HOME/include/axis2-1.6.0 -L$AXIS2C_HOME/lib -laxutil -laxis2_axiom -laxis2_parser -laxis2_engine -lpthread -laxis2_http_sender -laxis2_http_receiver -ldl -Wl,--rpath -Wl,$AXIS2C_HOME/lib` ||
|| *WSF C++ WSO2* || <font color="green" size="1">Makefile is not provided. Command line to compile client:</font><br>`g++ -o calculator_client src/*.cpp -I$AXIS2C_HOME/include/axis2-1.6.0 -L$AXIS2C_HOME/lib -IWSFCPP_HOME/include -I$WSFCPP_HOME/include/axis2-1.6.0/platforms/ -Isrc -laxutil -laxis2_axiom -laxis2_parser -laxis2_engine -lpthread -laxis2_http_sender -laxis2_http_receiver -ldl -lwso2_wsf -Wl,--rpath -Wl,$AXIS2C_HOME/lib -Wl,--rpath -Wl,$WSFCPP_HOME/lib` ||
|| *gSoap*        || <font color="green" size="1">Makefile is not provided. Command line to compile client:</font><br>`g++ calculator_client.cpp soapClient.cpp soapC.cpp /usr/include/gsoap/stdsoap2.cpp -o calculator_client -I/usr/include/gsoap` ||


== Codegenerator capabilities ==

|| *Criteria*                           || *WSF Staff* || *Axis2/C* || *WSF C++ WSO2* || *gSoap* ||
|| can generate .vcproj                 || yes         || yes       || yes            || no      ||
|| can generate Makefile for GNU Make   || yes         || no        || no             || no      ||
|| can generate .pro file for qmake     || yes         || no        || no             || no      ||
|| can generate example of client impl. || yes         || no        || no             || no      ||
|| codegeneration time                  || 18 ms       || ~1800 ms  || ~1800 ms       || 16 ms   ||

== WSDL/SOAP Support ==

_Table below is in unwrapped mode of Axis2/C and WSO2 codegenerators._

|| *Support*                           || *WSF Staff*   || *Axis2/C* || *WSF C++ WSO2* || *gSoap* ||
|| Custom OM handling (xsd:any)        || yes           || no (bug?) || yes            || yes     ||
|| Attributes in structures            || yes           || yes       || yes            || yes     ||
|| Attributes in requests              || yes           || yes       || yes            || yes`*`  ||
|| Attributes in responses             || yes           || no (bug?) || no (bug?)      || yes`*`  ||
|| !Base64Binary                       || yes           || yes       || yes`**`        || yes     ||
|| !HexBinary                          || yes           || no        || no             || yes     ||
|| Optional types                      || yes           || yes       || yes            || yes     ||
|| Nillable types                      || yes           || yes       || yes            || yes     ||
|| Choice                              || yes           || yes       || yes            || yes     ||
|| !AttributeGroup                     || yes           || yes       || yes            || yes     ||
|| Dynamically typed data              || yes           || no (bug?) || no             || yes     ||
|| SOAP Arrays                         || yes           || partial   || partial        || yes     ||
|| Asynchronous service invocation     || yes           || yes       || yes            || yes     ||

`*` unwrapping is not supported

`**` C++ support is missing: WSO2 using Axis2/C `axutil_base64_binary_t` to represent base64Binary


== Example of code produced by frameworks ==

As source we take very simple WSDL:
{{{
<?xml version="1.0" encoding="UTF-8" ?>
<wsdl:definitions 
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://tempui.org/echo"
    targetNamespace="http://tempui.org/echo">

  <wsdl:message name="echoStringRequest">
    <wsdl:part name="data" type="xsd:string"/>
  </wsdl:message>
  <wsdl:message name="echoStringResponse">
    <wsdl:part name="echoStringReturn" type="xsd:string"/>
  </wsdl:message>

  <wsdl:portType name="echoPortType">
    <wsdl:operation name="echoString">
      <wsdl:input message="tns:echoStringRequest"/>
      <wsdl:output message="tns:echoStringResponse"/>
    </wsdl:operation>
  </wsdl:portType>

  <wsdl:binding name="echoBinding" type="tns:echoPortType">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="echoString">
      <soap:operation style="rpc"/>
      <wsdl:input>
        <soap:body use="literal" namespace="http://tempui.org/echo"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" namespace="http://tempui.org/echo"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>

  <wsdl:service name="echo">
    <wsdl:port name="echoPort" binding="tns:echoBinding">
      <soap:address location="http://localhost/axis2/services/echo"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
}}}


=== WSF Staff ==

Files produced:
{{{
Makefile
echo.pro
echo.vcproj
codegen.cmd
src/echo.h
src/main.cpp
}}}

==== Service interface ====
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _echo_h_
#define _echo_h_

#include <string>
#include <staff/common/IService.h>

  //!  service echo
  // *serviceUri: http://localhost/axis2/services/echo
  // *soapVersion: 1.1
  class echo: public staff::IService
  {
  public:
    // *responseElement: echoStringResponse
    // *resultElement: echoStringReturn
    virtual std::string echoString(const std::string& data) = 0;
  };


#endif // _echo_h_
}}}

==== Client implementation ====
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <memory>
#include <staff/utils/Log.h>
#include <staff/common/logoperators.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "echo.h"


int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  try
  {
    std::auto_ptr< ::echo > pecho(::staff::ServiceFactory::Inst().GetService< ::echo >());

    STAFF_ASSERT(pecho.get(), "Cannot get client for service echo!");

    // Invoke Your service here:

    // std::string data;
    // const std::string& echoStringResponse = pecho->echoString(data);
    // staff::LogInfo() << "echoString result: " << echoStringResponse;
  }
  STAFF_CATCH_ALL

  return 0;
}
}}}

=== Axis2/C ===

Files produced:
{{{
axis2_extension_mapper.h
echoClient.vcproj
adb_echoStringResponse.h
adb_echoString.h
adb_echoStringResponse.c
adb_echoString.c
axis2_stub_echo.c
axis2_stub_echo.h
axis2_extension_mapper.c
}}}

==== Client stub header ====

{{{


        /**
        * axis2_stub_echo.h
        *
        * This file was auto-generated from WSDL for "echo|http://tempui.org/echo" service
        * by the Apache Axis2/Java version: 1.6.0  Built on : May 17, 2011 (04:19:43 IST)
        */

        #include <stdio.h>
        #include <axiom.h>
        #include <axutil_utils.h>
        #include <axiom_soap.h>
        #include <axis2_client.h>
        #include <axis2_stub.h>

       
         #include "adb_echoString.h"
        
         #include "adb_echoStringResponse.h"
        

	#ifdef __cplusplus
	extern "C" {
	#endif

        /***************** function prototypes - for header file *************/
        /**
         * axis2_stub_create_echo
         * Create and return the stub with services populated
         * @param env Environment ( mandatory)
         * @param client_home Axis2/C home ( mandatory )
         * @param endpoint_uri Service endpoint uri( optional ) - if NULL default picked from WSDL used
         * @return Newly created stub object
         */
        axis2_stub_t* AXIS2_CALL
        axis2_stub_create_echo(const axutil_env_t *env,
                                        const axis2_char_t *client_home,
                                        const axis2_char_t *endpoint_uri);
        /**
         * axis2_stub_populate_services_for_echo
         * populate the svc in stub with the service and operations
         * @param stub The stub
         * @param env environment ( mandatory)
         */
        void AXIS2_CALL 
        axis2_stub_populate_services_for_echo( axis2_stub_t *stub, const axutil_env_t *env);
        /**
         * axis2_stub_get_endpoint_uri_of_echo
         * Return the endpoint URI picked from WSDL
         * @param env environment ( mandatory)
         * @return The endpoint picked from WSDL
         */
        axis2_char_t* AXIS2_CALL
        axis2_stub_get_endpoint_uri_of_echo(const axutil_env_t *env);


        
            /**
             * Auto generated function declaration
             * for "echoString|http://tempui.org/echo" operation.
             * @param stub The stub (axis2_stub_t)
             * @param env environment ( mandatory)
             * @param _data of the axis2_char_t*
             *
             * @return axis2_char_t*
             */

            axis2_char_t* AXIS2_CALL 
            axis2_stub_op_echo_echoString( axis2_stub_t *stub, const axutil_env_t *env,
                                                  axis2_char_t* _data);
          

        /**
         * Auto generated function for asynchronous invocations
         * for "echoString|http://tempui.org/echo" operation.
         * @param stub The stub
         * @param env environment ( mandatory)
         * @param _data of the axis2_char_t*
         * @param user_data user data to be accessed by the callbacks
         * @param on_complete callback to handle on complete
         * @param on_error callback to handle on error
         */


        void AXIS2_CALL
        axis2_stub_start_op_echo_echoString( axis2_stub_t *stub, const axutil_env_t *env,
                                                  axis2_char_t* _data,
                                                  void *user_data,
                                                  axis2_status_t ( AXIS2_CALL *on_complete ) (const axutil_env_t *, axis2_char_t* _echoStringResponse, void *data),
                                                  axis2_status_t ( AXIS2_CALL *on_error ) (const axutil_env_t *, int exception, void *data) );

        


    /** we have to reserve some error codes for adb and for custom messages */
    #define AXIS2_STUB_ECHO_ERROR_CODES_START (AXIS2_ERROR_LAST + 2000)

    typedef enum 
    {
        AXIS2_STUB_ECHO_ERROR_NONE = AXIS2_STUB_ECHO_ERROR_CODES_START,
        
        AXIS2_STUB_ECHO_ERROR_LAST
    } axis2_stub_echo_error_codes;

	#ifdef __cplusplus
	}
	#endif
   


}}}



=== WSF C++ WSO2 ===

Files produced:
{{{
EchoString.h
IechoCallback.h
EchoStringResponse.h
EchoStringResponse.cpp
echoClient.vcproj
echoStub.h
echoStub.cpp
EchoString.cpp
}}}


==== Client stub header ====

{{{


#ifndef ECHOSTUB_H
#define ECHOSTUB_H
/**
* echoStub.h
*
* This file was auto-generated from WSDL for "echo|http://tempui.org/echo" service
* by the Apache Axis2/Java version: 1.0  Built on : Oct 15, 2009 (12:36:59 IST)
*/

#include <stdio.h>
#include <OMElement.h>
#include <Stub.h>
#include <ServiceClient.h>


#include <EchoString.h>

#include <EchoStringResponse.h>


namespace org_tempui_echo
{

#define ECHOSTUB_ERROR_CODES_START (AXIS2_ERROR_LAST + 2000)

typedef enum
{
     ECHOSTUB_ERROR_NONE = ECHOSTUB_ERROR_CODES_START,

    ECHOSTUB_ERROR_LAST
} echoStub_error_codes;

 class IechoCallback;

 

class echoStub : public wso2wsf::Stub
{

        public:
        /**
         *  Constructor of echo class
         *  @param client_home WSF/C home directory
         *  
         */
        echoStub(std::string& client_home);

        /**
         *  Constructor of echo class
         *  @param client_home WSF/C home directory
         *  @param endpoint_uri The to endpoint uri,
         */

        echoStub(std::string& client_home, std::string& endpoint_uri);

        /**
         * Populate Services for echoStub
         */
        void WSF_CALL
        populateServicesForecho();

        /**
         * Get the endpoint uri of the echoStub
         */

        std::string WSF_CALL
        getEndpointUriOfecho();

        

            /**
             * Auto generated function declaration
             * for "echoString|http://tempui.org/echo" operation.
             * 
             * @param _data of the std::string
             *
             * @return std::string
             */

            std::string WSF_CALL echoString( std::string _data);
          

        /**
         * Auto generated function for asynchronous invocations
         * for "echoString|http://tempui.org/echo" operation.
         * @param stub The stub
         * 
         * @param _data of the std::string
         * @param ICallback callback handler
         */


        void WSF_CALL
        start_echoString(std::string _data,IechoCallback* callback);

          


};

/** we have to reserve some error codes for adb and for custom messages */



}


        
#endif        
   


}}}




=== gSoap ===

Files produced:
{{{
soapC.cpp
echoBinding.echoString.res.xml
echoBinding.nsmap
soapechoBindingProxy.h
echoBinding.echoString.req.xml
echo.h
soapH.h
soapStub.h
soapServerLib.cpp
soapClient.cpp
soapServer.cpp
echo.wsdl
soapClientLib.cpp
soapechoBindingObject.h
}}}


==== Client stub header ====

{{{
/* soapStub.h
   Generated by gSOAP 2.7.9l from echo.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_ns1__echoStringResponse
#define SOAP_TYPE_ns1__echoStringResponse (7)
/* ns1:echoStringResponse */
struct ns1__echoStringResponse
{
public:
	std::string echoStringReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__echoString
#define SOAP_TYPE_ns1__echoString (11)
/* ns1:echoString */
struct ns1__echoString
{
public:
	std::string data;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (12)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (13)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (15)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (18)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (19)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns1__echoString(struct soap*, std::string data, struct ns1__echoStringResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__echoString(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string data, struct ns1__echoStringResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__echoString(struct soap*);

#endif

/* End of soapStub.h */
}}}




