#summary Пример: Создание AJAX клиента Calculator в Linux 

_Внимание: Вы должны установить webapp согласно инструкции InstallationManualWebappLinux_

== 1. Создание виджета ==

Виджет - это набор HTML/webapp/YUI для взаимодействия пользователя с сервисом.
Физически фиджет представлен в виде js-файла. 

Создадим простой виджет, который содержит метки, два текстовых поля ввода и кнопку для вызова сервиса.
Создайте файл:
{{{
cd $WWWSAMPLE/widget
gedit Calculator.js
}}}

Вставьте код виджета: 
{{{
// namespace for this widget
namespace('widget');

// including Calculator client
Include('clients/Calculator');

///////////////////////////////////////////////////////////////
// Calculator widget

widget.Calculator = Class.create();
widget.Calculator.prototype.extend(webapp.widget.Widget.prototype).extend
({
  // create controls
  Create: function(tParent)
  {
    // markup table
    var tTableMarkup = new webapp.ui.Table(tParent);

    var tRow1 = tTableMarkup.AddRow();

    // editor for operand A
    this.tEditA = new webapp.ui.Edit(tTableMarkup.AddCell(tRow1), { sText: 1 });
    this.tEditA.SetWidth("2em");

    // label "+"
    var tLabelB = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: ' + ' });

    // editor for operand B
    this.tEditB = new webapp.ui.Edit(tTableMarkup.AddCell(tRow1), { sText: 2 });
    this.tEditB.SetWidth("2em");

    // label for result
    var tLabelResult = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: ' = ' });
    this.tLabelResultValue = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: '?' });

    // button for invoking service
    var tButton = new webapp.ui.Button(tTableMarkup.AddRowCell({ nColSpan: 5 }), { sCaption: _('Calculate') });
    tButton.On('click', this._OnCalculateClicked.bind(this));

    return tTableMarkup; // return our parent control
  },

  // onclick handler
  _OnCalculateClicked: function()
  {
    var tCalculator = this.GetCalculatorService();

    // get entered arguments
    var nA = this.tEditA.GetText();
    var nB = this.tEditB.GetText();

    // invoking service
    var sResult = tCalculator.Add(nA, nB);

    // set label text
    this.tLabelResultValue.SetCaption(sResult);
  },

  // get service
  GetCalculatorService: function()
  {
    if (!this._tCalculatorService)
    {
      this._tCalculatorService = new samples.Calculator();
    }

    return this._tCalculatorService;
  }
});

}}}

== 2. Генерация прокси ==

Для генерации прокси можно использовать интерфейсный файл или wsdl.

Для генерации прокси из интерфейсного файл введите команду из каталога `src` примера ExampleCalculatorServiceLinux.
{{{
staff_codegen -tjsclient -o$WWWSAMPLE/clients Calculator.h
}}}

Для генерации прокси из wsdl введите команду.
{{{
staff_codegen -pwsdl -tjsclient -o$WWWSAMPLE/clients samples.Calculator.wsdl
}}}


  _*ВНИМАНИЕ: При изменении интерфейсного файла или wsdl необходимо перегенерировать прокси.*_

== 3. Добавление виджета в БД ==

Необходимо обновить конфигурацию менеджера виджетов.

Отредактируйте список виджетов
{{{
sudo gedit /usr/local/staff/components/widget/db/widgets.xml
}}}

добавив строки перед тегом `</Classes>` аналогично существующим:
{{{
  <Widget>
    <Class>widget.Calculator</Class>
    <Name>Calculator</Name>
  </Widget>
}}}

Отредактируйте профиль:
{{{
sudo gedit /usr/local/staff/components/widget/db/baseprofiles.xml
}}}

Необходимо изменить профиль webapp_sample, для добавления виджета в список.
добавьте эту строку после `<Widget>widget.Sample</Widget>`:
{{{
    <Widget>widget.Calculator</Widget>
}}}


== 4. Тестирование ==
Откройте страницу в веб браузере:

http://localhost/webapp-sample/main.htm?profile=webapp_sample

Выберите "Виджеты" => "Добавить". В открывшемся диалоге выберите "Calculator", и нажмите "OK".
Выберите любую позицию и нажмите "OK".

Виджет Calculator должен загрузиться.

Для вызова сервиса введите числа в поля ввода и нажмите кнопку "Calculate".

