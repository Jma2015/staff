#summary Руководство по установке, конфигурации и тестированию под Mac OS X
#labels Phase-Deploy

= Вступление =

Это руководство по компиляции и установке Staff под Mac OS X.

= Описание =

== 0. Переменные окружения ==
При компиляции, запуске axis2/c, клиентского или сервисного приложения, должны быть установлены следующие переменные окружения.
{{{
export AXIS2C_HOME=/usr/local/axis2c
export STAFF_HOME=/usr/local/staff
export PATH=$PATH:$STAFF_HOME/bin
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$AXIS2C_HOME/lib:$STAFF_HOME/lib
}}}

Добавьте эти строки в файл ~/.profile, после чего либо произведите повторный вход в систему, либо выполните:
{{{
. ~/.profile
}}}

Для запрета сброса переменных при выполнении sudo, отредактируйте sudoers-файл, используя visudo:
{{{
sudo visudo
}}}

*Или* если у Вас не хватает опыта по работе в VI, используйте любой другой текстовый редактор:
{{{
nano /etc/sudoers
}}}

Добавьте эти строки за последней строкой "Defaults        env_keep...":
{{{
Defaults        env_keep += "STAFF_HOME"
Defaults        env_keep += "AXIS2C_HOME"
}}}


== 1. Компиляция и установка зависимостей ==

Необходимо сначала установить axis2/c-1.6.0. Домашняя страница axis2/c: http://ws.apache.org/axis2/c/

  <i>*Внимание. Если Вы планируете передавать строки содержащие локальные символы, необходимо:*
    #. использовать libxml (guththila имеет проблемы с utf-8);
    #. после распаковки axis2/c изменить кодировку по умолчанию.
 
  Для изменения кодировки необходимо заменить строку в файле include/axis2_http_transport.h
  {{{
  #define AXIS2_HTTP_DEFAULT_CONTENT_CHARSET "ISO-8859-1"
  }}}
  на
  {{{
  #define AXIS2_HTTP_DEFAULT_CONTENT_CHARSET "UTF-8"
  }}}

  После чего выполнить компиляцию и сборку Axis2/C.</i>

Вы можете использовать следующий набор команд для загрузки и установки axis2/c:
{{{
mkdir ~/devel/axis2c
cd ~/devel/axis2c
wget http://www.sai.msu.su/apache/ws/axis2/c/1_6_0/axis2c-src-1.6.0.tar.gz
tar zxvf axis2c-src-1.6.0.tar.gz
cd axis2c-src-1.6.0
# загрузка патча axis2c-1.6.0 для mac os x 10.5.5
curl http://staff.googlecode.com/files/axis2c-src-1.6.0.MacOSX-10.5.5.patch > axis2c-src-1.6.0.MacOSX-10.5.5.patch
# применение патча:
patch -p0 -r axis2c-src-1.6.0 < axis2c-src-1.6.0.MacOSX-10.5.5.patch
# для использования guththila (более потокобезопасный, быстрый чем libxml, но поддержка UTF-8 реализована не полностью)
#./configure --prefix=$AXIS2C_HOME --enable-tests=no --enable-amqp=no
# для использования libxml (поддерживает UTF-8, но могут возникать ошибки типа race condition при обработке xml, см. issue 69 )
./configure --prefix=$AXIS2C_HOME --enable-libxml2 --enable-tests=no --enable-guththila=no --enable-amqp=no
make && sudo make install
# установка примеров
cd samples
CFLAGS=-I$AXIS2C_HOME/include/axis2-1.6.0 LDFLAGS=-L$AXIS2C_HOME/lib ./configure --prefix=$AXIS2C_HOME
make && sudo make install
}}}

== 2. Получение исходного кода ==

Пожалуйста перейдите по ссылке http://code.google.com/p/staff/source/checkout для получения информации о том, как загрузить исходный код из svn репозитория.
Или загрузите архив исходных файлов из секции [http://code.google.com/p/staff/downloads/list Download].

== 3. Компиляция исходного кода ==

Введите эти команды для компиляции и установки Staff из корня рабочей копии:

{{{
make && sudo make install
chmod 777 $AXIS2C_HOME/logs
}}}

Для компиляции и установки примеров запустите:
{{{
cd staff/samples
make && sudo -E make install
}}}

== 4. Запуск ==

=== 4.1 Запуск в обычном режиме ===

Чтобы запустить сервер приложений axis2/c в обычном режиме, введите команды:
{{{
cd $AXIS2C_HOME/bin
./axis2_http_server
}}}

=== 4.2 Запуск в отладочном режиме == 

Чтобы запустить сервер приложений axis2/c в отладочном режиме, введите команды:
{{{
cd $AXIS2C_HOME/bin
RISE_LOG_LEVEL=DEBUG3 RISE_EXCEPTION_STACKTRACING=1 ./axis2_http_server
}}}


== 5. Тестирование ==

=== 5.1 Основной тест ===

В Веб-браузере откройте ссылку:

http://localhost:9090/axis2/services

Примеры сервисов "samples.calc.!CalcService", "samples.calc.!SubService" должны быть в списке.


=== 5.2 Тест клиент-сервисного взаимодействия ===

Из другой консоли запустите клиент calc:
{{{
${STAFF_HOME}/samples/bin/calc_client
}}}

На экран должно быть выведено:
{{{
INFO main.cpp[49]: main: 1 + 2 = 3
INFO main.cpp[51]: main: 3 - 1 = 2
INFO main.cpp[53]: main: Saved service mem: 0
INFO main.cpp[58]: main: Setting mem: 46
INFO main.cpp[60]: main: 46
INFO main.cpp[61]: main: Service mem: 46
}}}

