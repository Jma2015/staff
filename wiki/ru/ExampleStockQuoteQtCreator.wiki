#summary Создание клиента StockQuote использующего Qt

<h1>Сожержание</h1>
<wiki:toc max_depth="3" />

== Зависимости ==
Должны быть установлены и скофигурированы следующие зависимости:
  * Axis2/C;
  * WSF Staff;
  * Qt Creator;

== Создание проекта ==

Запустите Qt Creator и создайте новое консольное QT Приложение с именем "qt-soap-stockquote".

Создайте каталог "src" внутри каталога проекта.

== Генерация cpp кода из wsdl ==

Перейдите на сайт webservicex.net и загрузите файл wsdl схемы http://www.webservicex.net/stockquote.asmx?WSDL в каталог qt-soap-stockquote/src;

Запустите staff_codegen для генерациии интерфейса, прокси клиента, шаблона реализации клиента из stockquote.asmx.

Войдите в каталог qt-soap-stockquote/src и запустите:
{{{
staff_codegen stockquote.asmx -pwsdl -tinterface
staff_codegen stockquote.asmx -pwsdl -tclient
staff_codegen stockquote.asmx -pwsdl -tclientimpl
}}}

Будут сгенерированы следующие файлы:
{{{
stockquote.h   stockquoteProxy.cpp   stockquoteProxy.h   main.cpp
}}}

Сгенерированный интерфейсный файл (stockquote.h) будет выглядеть подобно:
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _stockquote_h_
#define _stockquote_h_

#include <staff/common/WsdlTypes.h>
#include <staff/common/IService.h>

// *targetNamespace: http://www.webserviceX.NET/

  //!  service StockQuote
  // *serviceUri: http://www.webservicex.net/stockquote.asmx
  // *targetNamespace: http://www.webserviceX.NET/
  class StockQuote: public staff::IService
  {
  public:
    //! Get Stock quote for a company Symbol
    // *responseElement: GetQuoteResponse
    // *resultElement: GetQuoteResult
    // *soapAction: http://www.webserviceX.NET/GetQuote
    virtual std::string GetQuote(const std::string& symbol) = 0;
  };


#endif // _stockquote_h_
}}}

Добавьте сгенерированные файлы в проект Qt Creator;

== Реализация клиента !StockQuote ==

Совместите файлы main.cpp сгенерированные staff_codegen и Qt Creator, реализуйте клиента (ниже комментария "Invoke Your service here:"):
{{{
#include <memory>
#include <QtCore/QCoreApplication>
#include <QDebug>
#include <rise/common/Log.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "stockquote.h"

int main(int nArgs, char* paszArgs[])
{
  QCoreApplication qCoreApp(nArgs, paszArgs);

  try
  {
    std::auto_ptr< StockQuote > pStockQuote(::staff::CServiceFactory::Inst().GetService< StockQuote >());

    RISE_ASSERTS(pStockQuote.get(), "Cannot get client for service StockQuote!");

    // Invoke Your service here:

    std::string sSymbol = "IBM";
    qDebug() << "Getting Quote for symbol: " << sSymbol.c_str();

    std::string sResponse = pStockQuote->GetQuote(sSymbol);
    qDebug() << "GetQuote result: \n" << sResponse.c_str();
  }
  RISE_CATCH_ALL

  qDebug() << "\nexecuting application...";
  return qCoreApp.exec();
}
}}}

Удалите из проекта файл main.cpp, сгенерированный Qt Creator.

== Настройка проекта ==
Откройте qt-soap-stockquote.pro и добавьте эти строки для сборки со staff:
{{{
INCLUDEPATH += $(STAFF_HOME)/include
LIBS += -L$(STAFF_HOME)/lib -lstaffclient
}}}

== Компиляция и запуск ==
Скомпилируйте проект в Qt Creator.

Запустите qt-soap-stockquote, в консоль должны быть выведены результаты подобно:
{{{
Getting Quote for symbol:  IBM 
GetQuote result: 
 <StockQuotes><Stock><Symbol>IBM</Symbol><Last>163.40</Last><Date>2/16/2011</Date><Time>4:00pm</Time><Change>0.00</Change><Open>163.33</Open><High>N/A</High><Low>N/A</Low><Volume>0</Volume><MktCap>201.0B</MktCap><PreviousClose>163.40</PreviousClose><PercentageChange>0.00%</PercentageChange><AnnRange>116.00 - 166.25</AnnRange><Earns>11.52</Earns><P-E>14.18</P-E><Name>International Bus</Name></Stock></StockQuotes> 

executing application... 
}}}

== Загрузка исходного кода ==

Загрузите исходный код [http://code.google.com/p/staff/downloads/detail?name=qt-soap-stockquote.7z здесь]

