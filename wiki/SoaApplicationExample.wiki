#summary Guide to the creation of SOA applications
#labels Featured

_NOTICE: translated from russian with translate.google.com_

= Introduction = 

 The document describes the basic sequence of steps that must be done to create:
  # Component Service
  # C++ client
  # JavaScript client as a widget

 As a result of the steps would be a simple SOA application.

= Description =

== 0. Directory Structure ==
 First create a directory structure for the service, and customers: 

{{{
 # Variable is needed only for a better understanding of directory structure
 export SOA_HOME=~/devel/ws/staff.example.HelloWorld

 # Create a directory for: the service component, C++ client, JavaScript Client
 # Create a directory for storing source files
 mkdir -p $SOA_HOME/component/src $SOA_HOME/client/src $SOA_HOME/jsclient/src
}}}

== 1. Creating a component service ==

=== 1.1. Creating a service interface component ===

  The interface component of service - a header file that contains a description of the class, which will provide a set of service functions(service operations).

  The interface can also contain a set of structures and typedefs that will be used to interact with the service.

  Open any text editor and create a file named `HelloWorld.h` in the directory $SOA_HOME/component/src:
{{{
  gedit $SOA_HOME/component/src/HelloWorld.h
}}}

  Insert the prepared sample interface: 
{{{
#ifndef _WS_HELLOWORLD_H_ 
#define _WS_HELLOWORLD_H_ 

#include <string> 

//! namespace defines a component of service 
namespace staff
{
  namespace example
  {
    //! abstract class service 
    /*! All functions must be pure-virtual. 
         Name class may also include the prefix "C" or "I" */
    class HelloWorld
    {
    public:
      //! virtual destructor
      virtual ~HelloWorld() {}

      //! example of the operation of service
      /*! \return "Hello, " + sName 
      */
      virtual std::string Hello(const std::string& sName) = 0;
    };
  }
}

#endif // #ifndef _WS_HELLOWORLD_H_
}}}

=== 1.2. Creating a service implementation === 
  The implementation of the service - a collection of files that implements the functional class of service. 

  To generate a template implementation of a component service type from the list of sources of service: 
{{{
  # Move to the directory service component source 
  cd $SOA_HOME/component/src/
  # Generate template implementation 
  staff_codegen -tserviceimpl HelloWorld.h
}}}

  Will be created thwo files containing the template implementation of the service: `HelloWorldImpl.cpp` `HelloWorldImpl.h` 

  Open the file `HelloWorldImpl.cpp` in a text editor and replace the implementation of a function (service operation) Hello: 
{{{
std::string HelloWorldImpl::Hello(const std::string& sName)
{
  return "Hello, " + sName;
}
}}}

  The implementation of the service is ready.
   _* WARNING: Changing the service interface should be independently make changes in implementation. When you re-generate the template perezatret realization.*_


=== 1.2. Generate component service wrapper ===
  Component service wrapper is a collection of files that implements the internal functions of the component services, such as:
   * Transfer the arguments and return value data types of service operations
   * Inclusion in the service component
   * Implementation of the context of the implementation

  To generate a wrapper component service type:
{{{
  # Move to the directory service component source
  cd $SOA_HOME/component/src/
  # Generate a component wrapping service
  staff_codegen -tcomponent HelloWorld.h
}}}

   _* WARNING: When You change the service interface, You must regenerate wrapper .*_ 

=== 1.4. Compiling the component service ===

To compile the component services create a simple Makefile in the directory $SOA_HOME/component/: 
{{{
COMPONENT = staff.example
TARGET = HelloWorld
TARGETNAME = lib$(TARGET).so

PLATFORM ?= $(shell uname -m)
SRCDIR = src/
OBJDIR = obj/$(PLATFORM)/
OUTDIR = out/$(PLATFORM)/

COMPONENT_HOME = $(STAFF_HOME)/components/$(COMPONENT)/

CXXFLAGS += -Wno-deprecated -fexceptions -I$(STAFF_HOME)/include -fPIC
LDFLAGS += -fexceptions -L$(STAFF_HOME)/lib
LDFLAGS += -lstaffcommon -lstaffcomponent -lrise -lpthread
LDFLAGS += -shared -Wl,-soname,$(TARGETNAME)

SOURCES = $(wildcard $(SRCDIR)*.cpp)
OBJECTS = $(patsubst %.cpp,$(OBJDIR)%.o,$(notdir $(SOURCES)))

# == make ===========================================
make: check "$(OBJDIR)" "$(OUTDIR)" $(OUTDIR)$(TARGETNAME)

# link
$(OUTDIR)$(TARGETNAME): $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $(OUTDIR)$(TARGETNAME)

# compile
$(OBJDIR)%.o: $(SRCDIR)%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# == install ========================================
install: check "$(COMPONENT_HOME)"
	cp -f $(OUTDIR)$(TARGETNAME) $(COMPONENT_HOME)

# == clean ==========================================
clean:
	rm -Rf $(OBJDIR) $(OUTDIR)

# == mkdir ==========================================
"%/":
	@[ -z "$@" -o -d "$@" ] || mkdir -p $@ && chmod g+w $@

# == check ==========================================
check:
ifeq ($(STAFF_HOME),)
	@echo "\033[31;1mERROR: STAFF_HOME is not set\033[0m"; false
endif
}}}

  Compile and install the component service:
{{{
cd $SOA_HOME/component/
make && sudo make install
}}}

=== 1.5. Testing ===
  Component Services is ready, you can now run Axis2/C and verify the validity of the registration of the component service. 
  From another console, type: 
{{{
cd $AXIS2_HOME/bin
./axis2_http_server
}}}

  Start any web browser and type the following address:
http://localhost:9090/axis2/services
  Among other services must be shown 

  ||<h3><u>staff.example.HelloWorld</u></h3><p>Staff service HelloWorld</p><i>Available Operations</i> <ul><li>Hello</li></ul>||

== 2. Creating C++ client ==

=== 2.1. Creating the implementation of the client ===
  Go to the directory the source files and the client create a symbolic link interface service: 
{{{
  cd $SOA_HOME/client/src/
  ln -s ../../component/src/HelloWorld.h HelloWorld.h
}}}

  Generate a template implementation of the client:
{{{
  staff_codegen -tclientimpl HelloWorld.h
}}}
  As a result, will create a file `main.cpp`, open it in a text editor and make the following changes: 

{{{
      // Invoke Your service here:
      const char* szUser = getenv("USER");
      std::cout << pHelloWorld->Hello(szUser != NULL ? szUser : "user") << std::endl;
}}}

=== 2.2. Generate a proxy client ===
  Proxy client - a collection of files that implements the internal functions of the client, such as: 
   * A facility to work with service 
   * Transfer the arguments and return value data types of service operations 

  To generate a client proxy, type:
{{{
  # Move to the directory the source client
  cd $SOA_HOME/client/src/
  # Generate a proxy
  staff_codegen -tclient HelloWorld.h
}}}

   _* WARNING: When You change the service interface, You must regenerat the proxy .*_ 

=== 2.3. Compiling client ===

To compile the client create a simple Makefile  in the directory $SOA_HOME/client/: 
{{{
COMPONENT = staff.example
TARGET = HelloWorld
TARGETNAME = $(TARGET)

PLATFORM ?= $(shell uname -m)
SRCDIR = src/
OBJDIR = obj/$(PLATFORM)/
OUTDIR = out/$(PLATFORM)/

CXXFLAGS += -Wno-deprecated -fexceptions -I$(STAFF_HOME)/include -fPIC
LDFLAGS += -fexceptions -L$(STAFF_HOME)/lib
LDFLAGS += -lstaffcommon -lstaffclient -lstaffcomponent -lrise

SOURCES = $(wildcard $(SRCDIR)*.cpp)
OBJECTS = $(patsubst %.cpp,$(OBJDIR)%.o,$(notdir $(SOURCES)))

# == make ===========================================
make: check "$(OBJDIR)" "$(OUTDIR)" $(OUTDIR)$(TARGETNAME)

# link
$(OUTDIR)$(TARGETNAME): $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $(OUTDIR)$(TARGETNAME)

# compile
$(OBJDIR)%.o: $(SRCDIR)%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# == install ========================================
install: check "$(COMPONENT_HOME)"
	cp -f $(OUTDIR)$(TARGETNAME) $(COMPONENT_HOME)

# == clean ==========================================
clean:
	rm -Rf $(OBJDIR) $(OUTDIR)

# == mkdir ==========================================
"%/":
	@[ -z "$@" -o -d "$@" ] || mkdir -p $@ && chmod g+w $@

# == check ==========================================
check:
ifeq ($(STAFF_HOME),)
	@echo "\033[31;1mERROR: STAFF_HOME is not set\033[0m"; false
endif
}}}

  Please compile the client:
{{{
  cd $SOA_HOME/client/
  make
}}}

=== 2.4. Testing ===

  Before starting, make sure that Axis2/C is running and the service component is registered (see section 1.5). 

  Run the client command: 
{{{
  cd $SOA_HOME/client/
  out/$(uname -m)/HelloWorld
}}}

  On the screen should be inferred message
 || Hello, user ||
  where "user" the name of the current account.


== 3. Creating a JavaScript client == 

=== 3.0. Setting webapp === 

  Apache2 has to be installed. 
  You must know the directory store html documents of Apache2. Usually it is one of the following addresses: 
{{{
 /var/www
 /www/htdocs
}}}

  For the convenience use the environment variable
{{{
  export WWWSAMPLE=/var/www/webapp-sample/
  mkdir -p $WWWSAMPLE
}}}

  Copy the client and a directory of examples from svn:
{{{
  cd $WWWSAMPLE
  svn export --force http://staff.googlecode.com/svn/trunk/webapp/webclient/samples .
  svn export --force http://staff.googlecode.com/svn/trunk/webapp/webclient/webapp webapp
}}}

  Also requires YahooUI (http://developer.yahoo.com/yui/). 
  Unzip the contents of the directory `build` to `$WWWSAMPLE/yui`. 

  Test the basic web application. Application Server, Axis2/C and Apache2 web server must be running. Open the page in the browser (Firefox) 
http://localhost/webapp-sample/main.htm?profile=webapp_sample
  web application must be loaded. 

=== 3.1. Creating a widget service ===

Widget - a set of HTML/YUI components for user interaction with the service. 
Physically, a widget is represented as the js-file. 

Create a simple widget that contains a label, text box and button to call service. 
Create a file: 
{{{
  cd $SOA_HOME/jsclient/src/
  mkdir -p widget
  gedit widget/HelloWorld.js
}}}

Paste the widget code: 
{{{
// namespace for this widget
namespace('widget');

// including HelloWorld client
Include('clients/HelloWorld');

///////////////////////////////////////////////////////////////
// HelloWorld widget

widget.HelloWorld = Class.create();
widget.HelloWorld.prototype.extend(webapp.widget.Widget.prototype).extend
({
  // create controls
  Create: function(tParent)
  {
    // markup table
    var tTableMarkup = new webapp.ui.Table(tParent);

    // label
    var tLabel = new webapp.ui.Label(tTableMarkup.AddRowCell(), { sCaption: _('Your name') + ':' });

    // editor for name
    var tEditName = new webapp.ui.Edit(tTableMarkup.AddRowCell());
    tEditName.SetValue(_('user'));
    tLabel.SetBuddy(tEditName);
    this.tEditName = tEditName;

    // button for invoking service
    var tButton = new webapp.ui.Button(tTableMarkup.AddRowCell(), { sCaption: _('Hello') });
    tButton.On('click', this._OnHelloClicked.bind(this));

    return tTableMarkup;
  },
  
  // onclick handler
  _OnHelloClicked: function()
  {
    var sName = this.tEditName.GetText();
    // invoking service
    var sResult = this.GetHelloWorldService().Hello(sName);

    alert(sResult);
  },

  // get service
  GetHelloWorldService: function()
  {
    if (!this.tHelloWorldService)
    {
      this.tHelloWorldService = new staff.example.HelloWorld();
    }

    return this.tHelloWorldService;
  }
});
}}}

=== 3.2. Creating a proxy ===
{{{
  cd $SOA_HOME/jsclient/src/
  mkdir -p clients
  staff_codegen -tjsclient -i../../component/src/ -oclients HelloWorld.h
}}}

=== 3.4. Installing ===
  Copy the widget, and client wrapper: 
{{{
  cp -Rf $SOA_HOME/jsclient/src/* $WWWSAMPLE
}}}

  Now you need update config of the widget manager. 
  Open file in a text editor
{{{
  gksudo gedit /usr/local/staff/components/widget/db/widgetdb_classes.webapp_sample.xml
}}}
  and add the following lines to the tag `</Classes>` is similar to the existing: 
{{{
    <Class>
      <Name>widget.HelloWorld</Name>
      <Descr>Hello World</Descr>
    </Class>
}}}

=== 3.5. Testing ===
 Open (or reload) page in your browser
http://localhost/webapp-sample/main.htm?profile=webapp_sample

  Click "Widgets" => "Add". In the dialog that opens, select "Hello World", then click "OK". Then select any position and click "OK." 
  Widget is loaded. 
  Pressing the button "Hello" will invoking the operation of service, whose results will be displayed in the dialog.
