#summary Example: creating a Calculator AJAX client under Linux 

_Notice: You must install webapp as in InstallationManualWebappLinux_

== 1. Creating the widget ==

Widget is a set of HTML/webapp/YUI components for user interaction with the service. 
Physically, a widget is represented as the js-file. 

Create a simple widget that contains a labels, two text boxes to input operands and button to call a Calculator service. 
Create a file:
{{{
cd $WWWSAMPLE/widget
gedit Calculator.js
}}}

Paste this widget code: 
{{{
// namespace for this widget
namespace('widget');

// including Calculator client
Include('clients/Calculator');

///////////////////////////////////////////////////////////////
// Calculator widget

widget.Calculator = Class.create();
widget.Calculator.prototype.extend(webapp.widget.Widget.prototype).extend
({
  // create controls
  Create: function(tParent)
  {
    // markup table
    var tTableMarkup = new webapp.ui.Table(tParent);

    var tRow1 = tTableMarkup.AddRow();

    // editor for operand A
    this.tEditA = new webapp.ui.Edit(tTableMarkup.AddCell(tRow1), { sText: 1 });
    this.tEditA.SetWidth("2em");

    // label "+"
    var tLabelB = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: ' + ' });

    // editor for operand B
    this.tEditB = new webapp.ui.Edit(tTableMarkup.AddCell(tRow1), { sText: 2 });
    this.tEditB.SetWidth("2em");

    // label for result
    var tLabelResult = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: ' = ' });
    this.tLabelResultValue = new webapp.ui.Label(tTableMarkup.AddCell(tRow1), { sCaption: '?' });

    // button for invoking service
    var tButton = new webapp.ui.Button(tTableMarkup.AddRowCell({ nColSpan: 5 }), { sCaption: _('Calculate') });
    tButton.On('click', this._OnCalculateClicked.bind(this));

    return tTableMarkup; // return our parent control
  },

  // onclick handler
  _OnCalculateClicked: function()
  {
    var tCalculator = this.GetCalculatorService();

    // get entered arguments
    var nA = this.tEditA.GetText();
    var nB = this.tEditB.GetText();

    // invoking service
    var sResult = tCalculator.Add(nA, nB);

    // set label text
    this.tLabelResultValue.SetCaption(sResult);
  },

  // get service
  GetCalculatorService: function()
  {
    if (!this._tCalculatorService)
    {
      this._tCalculatorService = new samples.Calculator();
    }

    return this._tCalculatorService;
  }
});

}}}

== 2. Generating the proxy ==

Proxy can be generated from interface file and from the WSDL.

To generate proxy from interface file, please use interface file from ExampleCalculatorServiceLinux.
{{{
staff_codegen -tjsclient -o$WWWSAMPLE/clients Calculator.h
}}}

To generate proxy from WSDL, enter command as follows:
{{{
staff_codegen -pwsdl -tjsclient -o$WWWSAMPLE/clients samples.Calculator.wsdl
}}}

  _* WARNING: If You change the service interface or WSDL, You must regenerate this proxy.*_

== 3. Adding widget into widget db ==

Now you need update configuration of the widget manager. 

Edit widgets list in the text editor:
{{{
sudo gedit /usr/local/staff/components/widget/db/widgets.xml
}}}

and add the following lines before the tag `</Widgets>` similar to the existing: 
{{{
  <Widget>
    <Class>widget.Calculator</Class>
    <Name>Calculator</Name>
  </Widget>
}}}

Edit profile in the text editor:
{{{
sudo gedit /usr/local/staff/components/widget/db/baseprofiles.xml
}}}

Change the profile with id webapp_sample, add widget into widgets list.
Add this line after `<Widget>widget.Sample</Widget>`:
{{{
    <Widget>widget.Calculator</Widget>
}}}


== 4. Testing ==
Open this page in your web browser:

http://localhost/webapp-sample/main.htm?profile=webapp_sample

Click "Widgets" => "Add". In the dialog that opens, select "Calculator", then click "OK". Then select any position and click "OK." 

Calculator widget must load.

[http://staff.googlecode.com/svn/wiki/img/widget-calculator.png http://staff.googlecode.com/svn/wiki/img/widget-calculator.png]

To invoke the service input some numbers and click "Calculate" button.

