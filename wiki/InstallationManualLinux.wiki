#summary Installation, configuration and test guide for Linux
#labels Featured,Phase-Deploy

= Introduction =

It's a little guide for compiling and installing Staff on Linux-like OS.

= Details =

== 0. Environment variables ==
While compiling, starting axis2/c or any client/service application, these environment variables must be set:
{{{
export AXIS2C_HOME=/usr/local/axis2c
export STAFF_HOME=/usr/local/staff
}}}

Append these lines into ~/.bashrc file, and then relogin.

== 1. Compile and install dependencies ==

You need Axis2/C version 1.5.0 or greater to be installed. Please, refer to http://ws.apache.org/axis2/c/download.cgi.

You can use following commands for downloading and installing axis2/c:
{{{
mkdir ~/devel/axis2c
cd ~/devel/axis2c
wget http://www.sai.msu.su/apache/ws/axis2/c/1_6_0/axis2c-src-1.6.0.tar.gz
tar zxvf axis2c-src-1.6.0.tar.gz
cd axis2c-src-1.6.0
./configure --prefix=$AXIS2C_HOME --enable-libxml2 --enable-tests=no--enable-guththila=no --enable-amqp=no
make && sudo -E make install
}}}


== 2. Getting source code ==

Please refer to http://code.google.com/p/staff/source/checkout to read guide for getting source code from svn repository.
Or download the source code from [http://code.google.com/p/staff/downloads/list Download] section.


== 3. Compiling source code ==

_Package binutils-dev is required._
Enter these commands to compile and install rise, Staff and Webapp.

{{{
make && sudo -E make install
sudo ldconfig $STAFF_HOME/lib $AXIS2C_HOME/lib
chmod 777 $(AXIS2C_HOME}/logs
}}}

== 4. Starting ==

=== 4.1 Starting in normal mode ===

To start axis2/c in normal mode, please enter:
{{{
cd $AXIS2C_HOME/bin
./axis2_http_server
}}}

=== 4.2 Starting in debug mode == 

To start axis2/c in debug mode, please enter:
{{{
cd $AXIS2C_HOME/bin
RISE_LOG_LEVEL=DEBUG3 RISE_EXCEPTION_STACKTRACING=1 ./axis2_http_server
}}}


== 5. Testing ==

=== 5.1 Basic test ===

Open Your favorite web-browser and enter:

http://localhost:9090/axis2/services

Sample services "samples.calc.CalcService", "samples.calc.SubService" must running.


=== 5.2 Service-Client interaction test ===

Open console and start calc client:
{{{
${STAFF_HOME}/samples/bin/calc_client
}}}

Screen output:
{{{
INFO main.cpp[49]: main: 1 + 2 = 3
INFO main.cpp[51]: main: 3 - 1 = 2
INFO main.cpp[53]: main: Saved service mem: 0
INFO main.cpp[58]: main: Setting mem: 46
INFO main.cpp[60]: main: 46
INFO main.cpp[61]: main: Service mem: 46
}}}
