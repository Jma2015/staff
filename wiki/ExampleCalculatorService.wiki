#summary Example: creating a Calculator Service for staff-2.0
#labels Featured

1. Service source directory structure:

{{{
CalculatorComponent/obj                       -- object files
CalculatorComponent/out                       -- output: service library and wsdl
CalculatorComponent/src                       -- source files
CalculatorComponent/src/Calculator.h          -- service interface
CalculatorComponent/src/CalculatorImpl.h      -- service implementation(header)
CalculatorComponent/src/CalculatorImpl.cpp    -- service implementation
CalculatorComponent/src/CalculatorWrapper.h   -- autogenerated service wrapper(header)
CalculatorComponent/src/CalculatorWrapper.cpp -- autogenerated service wrapper
CalculatorComponent/src/ComponentImpl.h       -- autogenerated component implementation (header)
CalculatorComponent/src/ComponentImpl.cpp     -- autogenerated component implementation
CalculatorComponent/Makefile
}}}

2. Create service source directories:
{{{
mkdir -p ~/devel/CalculatorComponent/src
}}}

3. Create service interface:

  _Service interface is a C++ header file that contains a class, which provides a set of functions(service operations). Interface can also contain a set of structures and typedefs that will be used to interact with the service._

Create Calculator's interface and put it into ~/devel/!CalculatorComponent/src/Calculator.h:
{{{
#ifndef _WS_CALCULATOR_H_
#define _WS_CALCULATOR_H_

#include <staff/common/IService.h>

namespace samples
{
  //! Calculator service
  class Calculator: public staff::IService
  {
  public:
    //! virtual destructor
    virtual ~Calculator() {}

    //! Add operation
    /*! \param nA - first argument
        \param nB - second argument
        \return nA + nB result
    */
    virtual int Add(int nA, int nB) = 0;

    //! Sub operation
    /*! \param nA - first argument
        \param nB - second argument
        \return nA - nB result
    */
    virtual int Sub(int nA, int nB) = 0;
  };
}

#endif // #ifndef _WS_CALCULATOR_H_

}}}

4. Create service's implementation:

To generate service's skeleton run commands as follows:
{{{
cd ~/devel/CalculatorComponent/src
staff_codegen -tserviceimpl Calculator.h
}}}

Service's skeleton will be generated in files:
{{{
CalculatorImpl.cpp
CalculatorImpl.h
}}}

To realize service implementation, edit !CalculatorImpl.cpp.
Implement functions Add and Sub as follows:
{{{
int CalculatorImpl::Add(int nA, int nB)
{
  return nA + nB;
}

int CalculatorImpl::Sub(int nA, int nB)
{
  return nA - nB;
}

}}}


5. Generate component service wrapper:

  _Component service wrapper is a set of files used to register class as service_

To generate wrapper enter:
{{{
cd ~/devel/CalculatorComponent/src
staff_codegen -tcomponent Calculator.h 
}}}

These files will be generated:
{{{
CalculatorWrapper.h
CalculatorWrapper.cpp
ComponentImpl.h
ComponentImpl.cpp
}}}

 _Please note that, when You change the service interface, You must regenerate wrapper._

6. Compilation and installation

Put Makefile as ~/devel/!CalculatorComponent/Makefile :

{{{
COMPONENT = samples
TARGET = Calculator
TARGETNAME = lib$(TARGET).so

PLATFORM ?= $(shell uname -m)
SRCDIR = src/
OBJDIR = obj/$(PLATFORM)/
OUTDIR = out/$(PLATFORM)/

COMPONENT_HOME = $(STAFF_HOME)/components/$(COMPONENT)/

CXXFLAGS = -I$(STAFF_HOME)/include -fPIC
LDFLAGS = -fPIC -L$(STAFF_HOME)/lib -lstaffcomponent -shared -Wl,-soname,$(TARGETNAME)

SOURCES = $(wildcard $(SRCDIR)*.cpp)
OBJECTS = $(patsubst %.cpp,$(OBJDIR)%.o,$(notdir $(SOURCES)))

# == make ===========================================
make: check "$(OBJDIR)" "$(OUTDIR)" $(OUTDIR)$(TARGETNAME)

# link
$(OUTDIR)$(TARGETNAME): $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $(OUTDIR)$(TARGETNAME)
	staff_codegen -twsdl $(SRCDIR)Calculator.h -o$(OUTDIR)

# compile
$(OBJDIR)%.o: $(SRCDIR)%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# == install ========================================
install: check "$(COMPONENT_HOME)"
	cp -f $(OUTDIR)$(TARGETNAME) $(COMPONENT_HOME)
	cp -f $(OUTDIR)*.wsdl $(COMPONENT_HOME)

# == clean ==========================================
clean:
	rm -Rf $(OBJDIR) $(OUTDIR)

# == mkdir ==========================================
"%/":
	@[ -z "$@" -o -d "$@" ] || mkdir -p $@ && chmod g+w $@

# == check ==========================================
check:
ifeq ($(STAFF_HOME),)
	@echo "\033[31;1mERROR: STAFF_HOME is not set\033[0m"; false
endif

}}}

Compile component service Calculator:
{{{
cd ~/devel/CalculatorComponent
make
}}}

Install component service Calculator:
{{{
sudo make install
}}}

7. Starting
Start Axis2/C:

{{{
cd $AXIS2C_HOME/bin
./axis2_http_server
}}}

Open The Web browser and go to address: http://localhost:9090/axis2/services

Your new service must shown as:

||<h3><u>samples.Calculator</u></h3><p>Calculator service <sup><a style="font-size: x-small;">{{{[}}}[http://localhost:9090/axis2/services/samples.Calculator?wsdl wsdl]{{{]}}}</a></sup></p><i>Available Operations</i> <ul><li>Add</li><li>Sub</li></ul>||

8. To learn how to create service's client please read ExampleCalculatorClient