#summary Creating StockQuote client that uses Qt

<h1>Table of contents</h1>
<wiki:toc max_depth="3" />

== Dependencies ==
Must have the following dependencies installed and configured:
  * Axis2/C;
  * WSF Staff;
  * Qt Creator;

== Creating a project ==

Open Qt Creator and create new console Qt Application named "qt-soap-stockquote".

Create "src" dir inside the project dir.

== Generating cpp code from wsdl ==

Go to webservicex.net site and download wsdl schema file http://www.webservicex.net/stockquote.asmx?WSDL to qt-soap-stockquote/src directory;

Run staff_codegen over stockquote.asmx to generate interface, client proxy and client stub.

Enter qt-soap-stockquote/src directory and start:
{{{
# creating blocking (synchronous) version
staff_codegen stockquote.asmx -pwsdl -tinterface
# if you need to create non-blocking (asynchronous) version
#staff_codegen stockquote.asmx -pwsdl -tinterface -dnonblocking
staff_codegen stockquote.asmx -pwsdl -tclient
staff_codegen stockquote.asmx -pwsdl -tclientimpl
}}}


Will be generated the following files
{{{
stockquote.h   stockquoteProxy.cpp   stockquoteProxy.h   main.cpp
}}}

Add generated files into Qt Creator's project;

Generated interface file (stockquote.h) _in blocking mode_ will look like:
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _stockquote_h_
#define _stockquote_h_

#include <staff/common/WsdlTypes.h>
#include <staff/common/IService.h>

// *targetNamespace: http://www.webserviceX.NET/

  //!  service StockQuote
  // *serviceUri: http://www.webservicex.net/stockquote.asmx
  // *targetNamespace: http://www.webserviceX.NET/
  class StockQuote: public staff::IService
  {
  public:
    //! Get Stock quote for a company Symbol
    // *responseElement: GetQuoteResponse
    // *resultElement: GetQuoteResult
    // *soapAction: http://www.webserviceX.NET/GetQuote
    virtual std::string GetQuote(const std::string& symbol) = 0;
  };


#endif // _stockquote_h_
}}}

Generated interface file (stockquote.h) _in nonblocking mode_ will look like:
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _stockquote_h_
#define _stockquote_h_

#include <staff/common/WsdlTypes.h>
#include <staff/common/IService.h>

// *targetNamespace: http://www.webserviceX.NET/

  //!  service StockQuote
  // *serviceUri: http://www.webservicex.net/stockquote.asmx
  // *targetNamespace: http://www.webserviceX.NET/
  class StockQuote: public staff::IService
  {
  public:
    //! Get Stock quote for a company Symbol
    // *responseElement: GetQuoteResponse
    // *resultElement: GetQuoteResult
    // *soapAction: http://www.webserviceX.NET/GetQuote
    virtual void GetQuote(const std::string& symbol, staff::ICallback< const std::string& >& rCallback) = 0;
  };


#endif // _stockquote_h_
}}}

== Implementing the !StockQuote client ==

Merge main.cpp files generated by staff_codegen and by Qt Creator, implement the client (under "Invoke Your service here:" comment):
If you using _blocking_ version:
{{{
#include <memory>
#include <QtCore/QCoreApplication>
#include <QDebug>
#include <rise/common/Log.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "stockquote.h"

int main(int nArgs, char* paszArgs[])
{
  QCoreApplication qCoreApp(nArgs, paszArgs);

  try
  {
    std::auto_ptr< StockQuote > pStockQuote(::staff::CServiceFactory::Inst().GetService< StockQuote >());

    RISE_ASSERTS(pStockQuote.get(), "Cannot get client for service StockQuote!");

    // Invoke Your service here:

    std::string sSymbol = "IBM";
    qDebug() << "Getting Quote for symbol: " << sSymbol.c_str();

    std::string sResponse = pStockQuote->GetQuote(sSymbol);
    qDebug() << "GetQuote result: \n" << sResponse.c_str();
  }
  RISE_CATCH_ALL

  qDebug() << "\nexecuting application...";
  return qCoreApp.exec();
}
}}}

If you using _non-blocking_ version:
{{{
// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <memory>
#include <QtCore/QCoreApplication>
#include <QDebug>
#include <rise/common/Log.h>
#include <rise/threading/Thread.h>
#include <staff/common/DataObject.h>
#include <staff/client/ICallback.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "stockquote.h"

// callbacks
// callback for StockQuote::GetQuote
class StockQuoteGetQuoteCallback: public staff::ICallback< const std::string& >
{
public:
  virtual void OnComplete(const std::string& tResult)
  {
    // process result here
    qDebug() << "GetQuote(asynch) result: \n" << tResult.c_str();
  }

  void OnFault(const staff::CDataObject& rFault)
  {
    // process error here
    rise::LogError() << rFault.ToString();
  }
};


int main(int nArgs, char* paszArgs[])
{
  QCoreApplication qCoreApp(nArgs, paszArgs);

  try
  {
    std::auto_ptr< ::StockQuote > pStockQuote(::staff::CServiceFactory::Inst().GetService< ::StockQuote >());

    RISE_ASSERTS(pStockQuote.get(), "Cannot get client for service StockQuote!");

    // Invoke Your service here:

    StockQuoteGetQuoteCallback tStockQuoteGetQuoteCallback;

    std::string sSymbol = "IBM";
    qDebug() << "Getting Quote for symbol: " << sSymbol.c_str();

    // StockQuoteGetQuoteCallback tStockQuoteGetQuoteCallback;
    pStockQuote->GetQuote(sSymbol, tStockQuoteGetQuoteCallback);

     // Wait for asynch call is completed
     // Please note, that you cannot call any operation of this client
     // until this asynchronous request is completed.
     // To call operation while request is processing, please use another copy of client.
     while (!tStockQuoteGetQuoteCallback.IsCompleted())
     {
       rise::threading::CThread::Sleep(1000);
     }

  }
  RISE_CATCH_ALL

  return 0;
}
}}}

Remove Qt Creator generated file main.cpp from project.

== Configuring the project ==
Open qt-soap-stockquote.pro and add these lines to build with staff:
{{{
INCLUDEPATH += $(STAFF_HOME)/include
LIBS += -L$(STAFF_HOME)/lib -lstaffclient
}}}

== Compiling and starting ==
Compile application in Qt Creator.

Start qt-soap-stockquote, you should see result like:
{{{
Getting Quote for symbol:  IBM 
GetQuote result: 
 <StockQuotes><Stock><Symbol>IBM</Symbol><Last>163.40</Last><Date>2/16/2011</Date><Time>4:00pm</Time><Change>0.00</Change><Open>163.33</Open><High>N/A</High><Low>N/A</Low><Volume>0</Volume><MktCap>201.0B</MktCap><PreviousClose>163.40</PreviousClose><PercentageChange>0.00%</PercentageChange><AnnRange>116.00 - 166.25</AnnRange><Earns>11.52</Earns><P-E>14.18</P-E><Name>International Bus</Name></Stock></StockQuotes> 

executing application... 
}}}

== Download source code ==

Download source code [http://code.google.com/p/staff/downloads/detail?name=qt-soap-stockquote.7z here]

