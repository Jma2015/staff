#summary Общая структура SOA-приложения под staff
#labels Featured,Phase-Design

== Общая информация ==
 Этот документ содержит информацию по общей структуре типового SOA-приложения.

== Описание ==

 Диаграмма компонентов типового распределенного приложения на базе Axis2/C staff:

 [http://staff.googlecode.com/svn/wiki/img/component_diagram_ru.png http://staff.googlecode.com/svn/wiki/img/component_diagram_ru.png]

 Сервисная часть приложения может быть выполнена либо в виде отдельного подключаемого сервиса(на диаграмме - "Сервис"), либо в виде сервиса, который входит в состав компонента("Компонент"), либо сервиса Axis2/C(на диаграмме не отображено).

 Клиентской частью может выступать либо приложение, реализованное на C++ с использованием клиентских библиотек staff("С++ клиент"), либо приложение, реализованное на JavaScript("JavaScript клиент") либо любое другое приложение, реализующие обмен с сервисной частью посредством протокола SOAP, в формате, совместимом со staff.

 В состав C++ клиента входят:
  * Axis2 клиент: обеспечивает реализацию протокола SOAP поверх стандартных протоколов, TCP, HTTP/HTTPS;
  * упаковщик предназначен для преобразования параметров вызываемой функции сервиса в SOAP-запрос и преобразования полученного SOAP-ответа в результат выполнения функции.
  * фабрика упаковщиков осуществляет создание экземпляров упаковщиков для заданных сервисов.
  * реализация клиента выполняет обращение с сервису посредством вызова функций упаковщика. Реализация клиента осуществляется разработчиком.

 JavaScript клиент содержит те же компоненты, что и С++ клиент, за исключением фабрики упаковщиков. Назначение и общий принцип функционирования компонентов JavaScript клиента аналогично С++ клиенту.


 Ядро предназначено для диспетчеризации запросов и управления сервисами. 
 Назначение компонентов ядра:
  * Axis2/C – сервер приложений, обеспечивает транспортный уровень и базовую диспетчеризацию SOAP-запросов;
  * модуль staff: осуществляет фильтрацию запросов к сервисам staff;
  * сервис staff: выполняет прием, поиск сервиса и перенаправление запроса к указанному сервису;
  * диспетчер сервисов: осуществляет подключение, хранение информации о сервисах, управление и поиск сервисов.


 Подключаемый сервис - отдельное приложение, которое помимо функционала самого сервиса может содержать собственный функционал. При запуске осуществляет регистрацию в диспетчере сервисов.
 Подключаемый сервис содержит следующие функциональные компоненты:
  * клиент диспетчера сервисов – компонент, обеспечивающий SOAP-транспорт между сервисом и диспетчером сервисов;
  * обертка сервиса – компонент, обеспечивающий преобразование SOAP-запросов в вызовы функций сервиса и упаковку результатов;
  * реализация сервиса содержит набор функций, определяющий функционал сервиса. Реализация сервиса осуществляется разработчиком.


 Компонент содержит реализацию одного или более сервисов. 
 Типовой компонент состоит из:
  * реализации компонента – модуля, отвечающего за управление сервисами внутри компонента;
  * обертка сервиса – модуль, обеспечивающий преобразование SOAP-запросов в вызовы функций сервиса в заданном контексте и упаковку результатов;
  * контекст сервиса – информация о сессии, локальная информация о сервисе;
  * реализация сервиса содержит набор функций, определяющий функционал сервиса. Реализация сервиса осуществляется разработчиком.

 Опциональные модули предназначены для связи с другими компонентами и сервисами. Опциональными модулями компонента являются:
  * локатор сервисов – модуль предназначенный для поиска и генерации оберток для сервисов компонентов и подключаемых сервисов;
  * обертка сервиса – модуль предназначенный для связи текущего сервиса с подключаемым.