#summary DAS-scripting guide

== DAS-scripting guide ==

=== Script operators ===

_Script operators list:_
|| *operators*  || *description* || *parameters* || *example* ||
|| execute    || execute query via provider || node contents: query to execute || *<font color=green>Select from table using SQL providers:</font>*<br>{{{<execute>SELECT "id", "name", "description" FROM "users"</execute>}}}<br/>*<font color=green>Invoke service operation using Services provider:</font>*<br>{{{<execute>Add(nA=$a, nB=$b)</execute>}}}<br/>*<font color=green>Invoke shell command using Shell provider:</font>*<br>{{{<execute>ls $(directory)</execute>}}} ||
|| var        || declare or modify a variable || "name" - variable name<br>_"value" - variable value (expression)_<br>_"type"- variable type (!DataObject by default if no value defined)_ || *<font color=green>Declare/modify int variable:</font>*<br> {{{<var name="result" value="100" type="int" />}}}<br/> *<font color=green>Put query result into variable (!DataObject type):</font>*<br>{{{<var name="queryResult">}}}<br><dd>{{{<execute>SELECT * FROM tableName</execute>}}}</dd>{{{</var>}}}<br/>*<font color=green>Now you could get access to each field using:</font>*<br>{{{ ${queryResult.field1} }}} ||
|| ifeq/ifneq || process conditional operator.<br> process content operators if expressions are equal(ifeq) or not equal(ifneq) || "expr1" - expression 1<br>"expr2" - expression 2<br> || *<font color=green>Insert into table if variable `value` is not empty:</font>*<br>{{{<ifneq expr1="${value}" expr2="" >}}}<br><dd>{{{<execute>INSERT INTO values(name) VALUES('${value}')</execute>}}}</dd>{{{</ifneq>}}} ||
|| foreach    || iterate through elements || _"element" - child element to iterate_ || *<font color=green>Insert several records using foreach operator:</font>*<br>{{{<foreach element="$(identifiers)">}}}<br><dd>{{{<execute>INSERT INTO users "id", "name", "description" VALUES('$nodeValue', 'user_$nodeValue', 'autogenerated user # $nodeValue')</execute>}}}</dd>{{{</foreach>}}} ||
|| return     || set return value and break script execution || "var" - variable name to return || *<font color=green>Return value for datasource's operation:</font>*<br>{{{<return var="result" />}}}<br/>*<font color=green>Return single field value from !DataObject-typed variable:</font>*<br>{{{<return var="${queryResult.field1}" />}}}<br/>*<font color=green>Return generic type expression:</font>*<br>{{{<return>Calculated result = ${result}</return>}}} ||
|| log        || output evaluated message to axis2/c console || log text in subnode || *<font color=green>Write message to log:</font>*<br>{{{<log>a=${a}, b=${b}</log>}}} ||

`*` parameters marked _italic_ is optional
<br/>

=== Evaluating expressions ===

`${variable_name}` or `$variable_name` - replace placeholder to variable value

`${variable_name.child_name}` - replace placeholder to variable's child value (while using !DataObject-typed variables)

`$(element.name)` - replace placeholder to given request's element value

`$[element.name]` - replace parameter to given request's element. Suitable for Service provider only.

*Example:*


request to the datasource is:

 {{{<Test><Info><Id>123</Id><Name>test name</Name></Info></Test>}}}

variable "a" is declared as:

 {{{<var name="a" value="test" />}}}

expression:

{{{variable a="${a}" and Test info id = $(Info.Id), name="$(Info.Name)"}}}

evaluated expression will be:

{{{variable a="test" and Test info id = 123, name="test name"}}}
