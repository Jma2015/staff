// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <string.h>
#include <iostream>
#include <memory>
#include <staff/utils/Log.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceClient.h>
#include <staff/client/Options.h>
#include <staff/client/ServiceFactory.h>
#include "Echo.h"

// callbacks


int main(int nArgs, const char* paszArgs[])
{
  std::string sRestMethod = "POST";
  std::string sAddress = "http://localhost:9090/axis2/services/echo/echoString";

  if (nArgs > 1)
  {
    if (strcmp(paszArgs[1], "-h") == 0)
    {
      std::cerr << "Usage: " << paszArgs[0] << "[ -m<REST_METHOD>][ <ENDPOINT_URL>]" << std::endl
                << " Valid <REST_METHOD> are: POST(default), GET, HEAD, DELETE, PUT" << std::endl
                << "NOTE: You can test for other HTTP methods by changing the services.xml of the echo service" << std::endl
                << " and providing the correct REST HTTP method and the location to be used for operation." << std::endl
                << " Also note that you have to restart the server after changing the services.xml." << std::endl;
      return 0;
    }

    for (int nArg = 1; nArg < nArgs; ++nArg)
    {
      if (strncmp(paszArgs[nArg], "-m", 2) == 0)
      {
        sRestMethod = paszArgs[nArg] + 2;
      }
      else
      {
        sAddress = paszArgs[nArg];
      }
    }
  }

  std::cout << "Using method: " << sRestMethod << std::endl;
  std::cout << "Using address: " << sAddress << std::endl;

  try
  {
    std::auto_ptr< Echo > pEcho(::staff::ServiceFactory::Inst().GetService< Echo >(sAddress));

    STAFF_ASSERT(pEcho.get(), "Cannot get client for service samples.Echo!");

    // get service client to set REST method
    staff::ServiceClient* pClient = pEcho->GetClient();
    STAFF_ASSERT(pClient, "Cannot get ServiceClient");
    staff::Options& rOptions = pClient->GetOptions();

    // setting rest method
    rOptions.SetHttpMethod(sRestMethod);

    // Invoke Your service here:

    std::string tEchoStringResult = pEcho->EchoString("Hello World!");
    staff::LogInfo() << "EchoString result: " << tEchoStringResult;
  }
  STAFF_CATCH_ALL

  return 0;
}

