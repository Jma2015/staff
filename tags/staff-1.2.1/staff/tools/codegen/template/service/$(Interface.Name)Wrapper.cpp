// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <rise/process/Process.h>
#include <staff/common/Exception.h>
#include <staff/common/Operation.h>
#include <staff/common/Value.h>
#include "$(Interface.Name)Wrapper.h"
#include "$(Interface.Name)Impl.h"

#cginclude <common/Serialization.cpp>

#foreach $(Interface.Classes)
$(Class.OpeningNs)
$(Class.Name)Wrapper::$(Class.Name)Wrapper():
  m_pServiceImpl(NULL)
{
  ServiceImpl();
}

$(Class.Name)Wrapper::~$(Class.Name)Wrapper()
{
  if (m_pServiceImpl != NULL)
  {
    delete m_pServiceImpl;
    m_pServiceImpl = NULL;
  }
}

$(Class.Name)Impl& $(Class.Name)Wrapper::ServiceImpl()
{
  if (m_pServiceImpl == NULL)
    m_pServiceImpl = new $(Class.Name)Impl;

  return *m_pServiceImpl;
}

void $(Class.Name)Wrapper::Invoke( staff::COperation& rOperation )
{
  const staff::CDataObject& rRequest = rOperation.Request();
  staff::CDataObject& rResult = rOperation.Result();
  const rise::CString& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rResult.DeclareDefaultNamespace("http://tempui.org/staff/service-description");
    rResult.CreateChild("Name", "$(Class.ServiceNsName)");

    rResult.CreateChild("SessionId", GetSessionId());

    rResult.CreateChild("Description", \
#ifneq($(Class.Description),)
"$(Class.Description)"\
#else
"Staff service $(Class.ServiceName)"\
#ifeqend
);

    staff::CDataObject rOperations = rResult.CreateChild("Operations");
#foreach $(Class.Members)
    {// Operation: $(Member.Return.Name) $(Member.Name)($(Member.Params))$(Member.Const)
      staff::CDataObject rOp$(Member.Name) = rOperations.CreateChild("Operation");
      rOp$(Member.Name).CreateChild("Name", "$(Member.Name)");
      rOp$(Member.Name).CreateChild("IsConst", $(Member.IsConst));

      staff::CDataObject rOpReturn$(Member.Name) = rOp$(Member.Name).CreateChild("Return");
      rOpReturn$(Member.Name).CreateChild("Type", "$(Member.Return.Name)");
      rOpReturn$(Member.Name).CreateChild("IsConst", $(Member.Return.IsConst));

      staff::CDataObject rOp$(Member.Name)Params = rOp$(Member.Name).CreateChild("Parameters");
#foreach $(Member.Params)
      {
        staff::CDataObject rOpParam$(Param.Name) = rOp$(Member.Name)Params.CreateChild("Param");
        rOpParam$(Param.Name).CreateChild("Name", "$(Param.Name)");
        rOpParam$(Param.Name).CreateChild("Type", "$(Param.DataType.Name)");
        rOpParam$(Param.Name).CreateChild("IsConst", $(Param.DataType.IsConst));
        rOpParam$(Param.Name).CreateChild("IsRef", $(Param.DataType.IsRef));
      }
#end
    }
#end
  } else
  if (sOperationName == "CreateServiceID")
  {
    rise::process::CProcess tService;
    RISE_ASSERTES(tService.Exec(rise::process::CProcess::GetCurrentExecPath() + "\t-s" + rRequest["sSessionId"].AsString()), 
      rise::CFileOpenException, "failed to execute process");
  } else  
#foreach $(Class.Members)
  if (sOperationName == "$(Member.Name)")
  {
    rOperation.SetResponseName("$(Member.Return.ResponseName)");
    rOperation.SetResultName("$(Member.Return.NodeName)");
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
    $(Param.DataType.Name) $(Param.Name);
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
    $(Param.DataType.Name) $(Param.Name);
#else
\
#ifeqend
#ifeqend
#end
\
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
    rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
    rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#else
\
#ifeqend
#ifeqend
#end
\
#ifeq($(Member.Return.Type),struct) // result value // !!struct!! 
    $(Member.Return.Name) tResult = \
#else
#ifeq($(Member.Return.Type),typedef)    // !!typedef!!
    $(Member.Return.Name) tResult = \
#else
#ifeq($(Member.Return.Type),generic)    // !!generic!!
#ifneq($(Member.Return.Name),void)      // !!not_void!!
    rOperation.ResultValue() = \
#else                                   // !!void!!
    \
#ifeqend
#else
#ifeq($(Member.Return.Type),string)    // !!string!!
    rOperation.ResultValue() = \
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
    staff::CDataObject tResultDO = \
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend // invoke an function
\
ServiceImpl().$(Member.Name)(\
#foreach $(Member.Params)
#ifeq($(Param.$Num),0) // param splitter
\
#else
, \
#ifeqend // params
#ifeq($(Param.DataType.Type),generic)    // !!generic!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
*rRequest.GetChildByLocalName("$(Param.Name)").Begin()\
#else
#ifeq($(Param.DataType.Type),struct)     // !!struct!! 
$(Param.Name)\
#else
#ifeq($(Param.DataType.Type),typedef)    // !!typedef!!
$(Param.Name)\
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#end // end of funtion param list
);
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
    rOperation.Result().AppendChild(tResultDO);
#else
\
#ifeqend // end of function invokation
#ifeq($(Member.Return.Type),struct) // result for structs and types // !!struct!! 
    rResult << tResult;
#else
#ifeq($(Member.Return.Type),typedef)    // !!typedef!!
    rResult << tResult;
#else
\
#ifeqend
#ifeqend
  } else
#end
  {
    RISE_THROWS(staff::CRemoteException, "Unknown Operation: " + rOperation.GetName());
  }
}
$(Class.EndingNs)

#end
