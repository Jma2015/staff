// This file generated by staff_codegen
// DO NOT EDIT

#include <memory>
#foreach $(Project.Interfaces)
#include "$(Interface.Name)Proxy.h"
#end
#include "ServiceFactory.h"

void* CServiceFactory::AllocateClient( const rise::CString& sClientType, const rise::CString& sSessionId, const rise::CString& sServiceName, const rise::CString& sHostName, const rise::CString& sHostPort )
{
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
#ifneq("$(Interface.Namespace)","")
#var sNamespace $(Interface.Namespace)::
#var sNamespacePrefix $(Interface.Namespace).
#else
#var sNamespace 
#var sNamespacePrefix 
#ifeqend
  if (sClientType == typeid($($sNamespace)$(Class.Name)).name())
  {
    std::auto_ptr<$($sNamespace)$(Class.Name)Proxy> pRet(new $($sNamespace)$(Class.Name)Proxy);
    pRet->Init(sSessionId, sServiceName == "" ? "$($sNamespacePrefix)$(Class.ServiceName)" : sServiceName, sHostName, sHostPort);
    return pRet.release();
  } else
#end
#end
  return NULL;
}

CServiceFactory& CServiceFactory::Inst()
{
  if (m_pInst == NULL)
  {
    m_pInst = new CServiceFactory;
  }

  return *m_pInst;
}

CServiceFactory::CServiceFactory()
{
}

CServiceFactory* CServiceFactory::m_pInst = NULL;
