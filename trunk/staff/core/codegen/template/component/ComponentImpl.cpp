// This file generated by staff_codegen
// DO NOT EDIT

#include <rise/plugin/PluginExport.h>
#include <rise/common/MutablePtr.h>
#foreach $(Project.Interfaces)
#include "$(Interface.Name)Wrapper.h"
#end
#include "ComponentImpl.h"

#ifneq("$(Project.Interfaces.Interface.Namespace)","")
#var sNamespace $(Project.Interfaces.Interface.Namespace)::
#else
#var sNamespace 
#ifeqend

RISE_DECLARE_PLUGIN($($sNamespace)CComponentImpl)

#ifneq("$(Project.Interfaces.Interface.Namespace)","")
namespace $(Project.Interfaces.Interface.Namespace)
{
#ifeqend
  CComponentImpl::CComponentImpl()
  {
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
#ifneq("$(Interface.Namespace)","")
#var sNamespace $(Interface.Namespace)::
#else
#var sNamespace 
#ifeqend
    m_mServices["$(Class.ServiceName)"] = new $($sNamespace)$(Class.Name)Wrapper(this);
#end
#end
  }

  CComponentImpl::~CComponentImpl()
  {
  }

  const rise::CString& CComponentImpl::GetName() const
  {
    return m_sName;
  }

  const staff::CService* CComponentImpl::GetService( const rise::CString& sService ) const
  {
    staff::TServiceMap::const_iterator itService = m_mServices.find(sService);
    if (itService == m_mServices.end())
      return NULL;

    return itService->second;
  }

  staff::CService* CComponentImpl::GetService( const rise::CString& sService )
  {
    staff::TServiceMap::iterator itService = m_mServices.find(sService);
    if (itService == m_mServices.end())
      return NULL;

    return itService->second;
  }

  const staff::TServiceMap& CComponentImpl::GetServices() const
  {
    return m_mServices;
  }

  const rise::CString CComponentImpl::m_sName = "$(Project.Interfaces.Interface.Namespace)";

#ifneq("$(Project.Interfaces.Interface.Namespace)","")
}
#ifeqend
