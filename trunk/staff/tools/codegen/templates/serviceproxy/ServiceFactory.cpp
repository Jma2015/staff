// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <rise/common/ExceptionTemplate.h>
#include <rise/common/SharedPtr.h>
#include <rise/plugin/PluginExport.h>
#include <staff/common/IService.h>
#foreach $(Project.Interfaces)
#include "$(Interface.FilePath)$(Interface.Name)Proxy.h"
#end
#include "ServiceFactory.h"

$(Project.OpeningNs)
  ServiceFactory::ServiceFactory()
  {
  }

  ServiceFactory::~ServiceFactory()
  {
  }

  ServiceFactory& ServiceFactory::Inst()
  {
    static ServiceFactory tInst;
    return tInst;
  }

  staff::IService* ServiceFactory::GetService(const std::string& sServiceNsName,
                                              const std::string& sSessionId,
                                              const std::string& sInstanceId)
  {
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
    if (sServiceNsName == "$(Class.NsName.!dot)")
    {
      return new $(Class.NsName)Proxy(sSessionId, sInstanceId);
    }
    else
#end
#end
    {
      RISE_THROWS(rise::CLogicNoItemException, "Service [" + sServiceNsName + "] is not registered");
    }
  }

  staff::IService* ServiceFactory::GetService(const std::string& sServiceNsName,
                                              const staff::IService *pCurrentService)
  {
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
    if (sServiceNsName == "$(Class.NsName.!dot)")
    {
      return new $(Class.NsName)Proxy(pCurrentService->GetSessionId(), pCurrentService->GetInstanceId());
    }
    else
#end
#end
    {
      RISE_THROWS(rise::CLogicNoItemException, "Service [" + sServiceNsName + "] is not registered");
    }
  }

$(Project.EndingNs)

