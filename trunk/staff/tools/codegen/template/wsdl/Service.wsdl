<?xml version="1.0" encoding="UTF-8"?>
<!-- This file generated by staff_codegen. -->
<!-- For more information please visit: http://code.google.com/p/staff/ -->
\
#var TargetNamespace $($tns||Interface.TargetNamespace||Interface.NsName.!dot.!prepend/http:\/\/tempui.org\//)
#var TnsPrefix tns_$(Interface.Namespace.!mangle)
\
<wsdl:definitions
    name="$(Interface.Name)"
#ifeq($($bpel),true)
    xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype"
#ifeqend
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:$($TnsPrefix)="$($TargetNamespace)"
#foreach $(Interface.Classes)
    xmlns:ns_$(Class.NsName.!mangle.!tolower)="http://tempui.org/$(Class.NsName.!dot)"
#end
#foreach $(Interface.Includes)
    xmlns:tns_$(Include.Namespace.!mangle)="$(Include.TargetNamespace||Include.NsName.!prepend/http:\/\/tempui.org\//)"
#end
    targetNamespace="$($TargetNamespace)">

  <wsdl:types>
    <schema
        xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="$($TargetNamespace)">
#ifneq($(Interface.Includes.$Count),0)

      <!-- imports -->
#foreach $(Interface.Includes)
      <import namespace="$(Include.TargetNamespace||Include.NsName.!prepend/http:\/\/tempui.org\//)" schemaLocation="$(Include.NsName.!dot).xsd" />
#end
#ifeqend
\
#cginclude "WsdlTypes.xsd"
#foreach $(Interface.Classes)

      <!-- requests, responses of service $(Class.NsName.!dot) -->
#foreach $(Class.Members)

      <!-- $(Member.Return.UsedName) $(Member.Name)($(Member.Params)) -->
#ifneq($(Member.Options.*inlineRequestElement),)
#ifeq($(Member.Params.$Count),0)
#cgerror inlineRequestElement is set, but operation has no parameters
#ifeqend
      <element name="$(Member.Options.*requestElement||Member.Name)" type="\
#context $(Member.Params.Param.DataType)
#cginclude "WsdlDataType.xsd"
#contextend
"/>
#else           //  not inline 
      <element name="$(Member.Options.*requestElement||Member.Name)">
#ifneq($(Member.Params.$Count),0)
        <complexType>
          <sequence>
#foreach $(Member.Params)
            <element name="$(Param.Name)"\
#ifeq($(Param.DataType.Name),Optional)
 minOccurs="0"\
#var sContext Param.DataType.TemplateParams.TemplateParam1
#else
#var sContext Param.DataType
#ifeqend      // optional
#context $($sContext)
#ifeq($(.Type),dataobject)   // dataobject
>
              <complexType>
                <sequence>
                  <any/>
                </sequence>
              </complexType>
            </element>
#else                                     // not dataobject
#ifeq($(.Type),template)
>
              <complexType>
                <sequence>
                  <element name="Item" type="\
#cginclude "WsdlDataType.xsd"
"/>
                </sequence>
              </complexType>
            </element>
#else // simple type
 type="\
#cginclude "WsdlDataType.xsd"
"/>
#ifeqend      // template
#ifeqend      // dataobject
#contextend   // optional
#end  // foreach member.params
          </sequence>
        </complexType>
#else // if Member.Params.$Count == 0
        <complexType/>
#ifeqend
      </element>
#ifeqend // request element is set
\
\
\
#var sResponse $(Member.Options.*responseElement)
#var sResult $(Member.Options.*resultElement)
\
\
#ifneq($($sResult),) // result element name is defined

      <element name="$($sResponse||Member.Name.!append/Response/)">
        <complexType>
          <sequence>
#ifeq($(Member.Return.Type),dataobject)
            <element name="$($sResult)">
              <complexType>
                <sequence>
                  <any/>
                </sequence>
              </complexType>
            </element>
#else            // not dataobject
            <element name="$($sResult)" type="\
#context $(Member.Return)
#cginclude "WsdlDataType.xsd"
#contextend
"/>
#ifeqend         // is dataobject
          </sequence>
        </complexType>
      </element>

\
#else //  result element name is not defined
\
\
#ifeq($($sResponse),) // response name is not defined, generating result
#var sResult $(Member.Name)Result
#else
#var sResult $($sResponse)
#ifeqend              // response name is not defined
\
\
      <element name="$($sResult)"\
#ifeq($(Member.Return.Name),Optional)
 nillable="true"\
#var sContext Member.Return.TemplateParams.TemplateParam1
#else
#var sContext Member.Return
#ifeqend      // optional
#context $($sContext)
\
#ifeq($(.Name),void)
>
        <complexType/>
      </element>
#else
#ifeq($(.Type),dataobject)
>
        <complexType>
          <sequence>
            <any/>
          </sequence>
        </complexType>
      </element>
#else
#ifeq($(.Type),template)
>
        <complexType>
          <sequence>
            <element name="Item" type="\
#cginclude "WsdlDataType.xsd"
"/>
          </sequence>
        </complexType>
      </element>
#else // simple type
 type="\
#cginclude "WsdlDataType.xsd"
"/>
#ifeqend // template
#ifeqend // dataobject
#ifeqend // void
#contextend // optional
#ifeqend // #ifneq($($sResult),) // result element name is defined
#end // #foreach $(Class.Members)
#end // foreach Interface.Classes
    </schema>
  </wsdl:types>
\
\
\
\

#foreach $(Interface.Classes)
  <!-- Messages of service $(Class.NsName.!dot) -->
#foreach $(Class.Members)
  <wsdl:message name="$(Class.NsName.!mangle)_$(Member.Name)Request">
    <wsdl:part element="$($TnsPrefix):$(Member.Options.*requestElement||Member.Name)" name="$(Class.NsName.!mangle)_$(Member.Name)Request"/>
  </wsdl:message>

  <wsdl:message name="$(Class.NsName.!mangle)_$(Member.Name)Response">
    <wsdl:part element="$($TnsPrefix):$(Member.Options.*responseElement||Member.Name.!append/Result/)" name="$(Class.NsName.!mangle)_$(Member.Name)Response"/>
  </wsdl:message>

#end // #foreach Class.Members
#end // foreach Interface.Classes
\
#foreach $(Interface.Classes)
  <!-- Port Type of service $(Class.NsName.!dot) -->
  <wsdl:portType name="$(Class.ServiceName)PortType">
#foreach $(Class.Members)
    <wsdl:operation name="$(Member.Name)">
#ifneq($(Member.Description),)
      <wsdl:documentation>$(Member.Description)</wsdl:documentation> 
#ifeqend
      <wsdl:input message="$($TnsPrefix):$(Class.NsName.!mangle)_$(Member.Name)Request" name="$(Member.Name)Request"/>
      <wsdl:output message="$($TnsPrefix):$(Class.NsName.!mangle)_$(Member.Name)Response" name="$(Member.Name)Response"/>
    </wsdl:operation>
#end // #foreach Class.Members
  </wsdl:portType>

#end // foreach Interface.Classes

#foreach $(Interface.Classes)
  <!-- binding of service $(Class.NsName.!dot) -->
  <wsdl:binding name="$(Class.ServiceName)SoapBinding" type="$($TnsPrefix):$(Class.ServiceName)PortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
#foreach $(Class.Members)
    <wsdl:operation name="$(Member.Name)">
      <soap:operation soapAction="$(Member.Options.*soapAction)"/>
      <wsdl:input name="$(Member.Name)Request">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="$(Member.Name)Response">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
#end // #foreach $(Class.Members)
  </wsdl:binding>

#end // foreach Interface.Classes

#foreach $(Interface.Classes)
  <!-- service $(Class.NsName.!dot) -->
  <wsdl:service name="$(Class.ServiceName)">
#ifneq($(Class.Description),)
    <wsdl:documentation>$(Class.Description)</wsdl:documentation>
#ifeqend
    <wsdl:port binding="$($TnsPrefix):$(Class.ServiceName)SoapBinding" name="$(Class.ServiceName)SoapPort">
      <soap:address location="$($serviceuri||Class.Options.*serviceUri||Class.ServiceNsName.!prepend/http:\/\/localhost:9090\/axis2\/services\//)"/>
    </wsdl:port>
  </wsdl:service>

#end // foreach Interface.Classes

#ifeq($($bpel),true)
  <!-- bpel partner link -->
  <plnk:partnerLinkType name="$(Class.ServiceName)">
    <plnk:role name="$(Class.ServiceName)Provider" portType="ns_$(Class.NsName.!mangle.!tolower):$(Class.ServiceName)PortType"/>
  </plnk:partnerLinkType>
#ifeqend
</wsdl:definitions>
