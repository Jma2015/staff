// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <map>
#ifneq($(Interface.Classes.$Count),0)
#include <rise/common/MutablePtr.h>
#include <staff/common/Exception.h>
#include <staff/common/Operation.h>
#include <staff/common/Value.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include "$(Interface.Name)Impl.h"
#else // types only interface
#include <staff/common/DataObject.h>
#include <staff/common/Value.h>
#ifeqend // #ifneq($(Interface.Classes.$Count),0) 
#foreach $(Interface.Includes)
#include "$(Include.Name)Wrapper.h"
#end
#include "$(Interface.Name)Wrapper.h"

#cginclude <common/Serialization.cpp>

#ifneq($(Interface.Classes.$Count),0)
#foreach $(Interface.Classes)

$(Class.OpeningNs)

$(Class.Name)Wrapper::$(Class.Name)Wrapper(staff::CComponent* pComponent):
  m_pComponent(pComponent)
{
}

$(Class.Name)Wrapper::~$(Class.Name)Wrapper()
{
}

void $(Class.Name)Wrapper::Invoke(staff::COperation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::CDataObject& rRequest = rOperation.Request();
  staff::CDataObject& rResult = rOperation.Result();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rResult = GetServiceDescription();
  } else
  if (sOperationName == "CreateInstance")
  {
    staff::CServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                 rRequest.GetChildByLocalName("sInstanceId").GetText());
  } else
  if (sOperationName == "FreeInstance")
  {
    staff::CServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                               rRequest.GetChildByLocalName("sInstanceId").GetText());
  } else
#foreach $(Class.Members)
  if (sOperationName == "$(Member.Name)")
  {
#ifneq($(Member.Options.*responseElement),)
    rOperation.SetResponseName("$(Member.Return.ResponseName)");
#else
    rOperation.SetResponseName("$(Member.Options.*responseElement)");
#ifeqend
    rOperation.SetResultName("$(Member.Options.*resultElement)");
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct||typedef||template)
    $(Param.DataType.NsName) $(Param.Name);
#ifeqend
#end
\
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct||typedef||template)
    rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#ifeqend
#end
    \
#ifeq($(Member.Return.Type),struct||typedef||template)
$(Member.Return.NsName) tResult = \
#else
#ifeq($(Member.Return.Type),generic)    // !!generic!!
#ifneq($(Member.Return.Name),void)      // !!not_void!!
rOperation.ResultValue() = \
#ifeqend
#else
#ifeq($(Member.Return.Type),string)    // !!string!!
rOperation.ResultValue() = \
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
staff::CDataObject tResultDO = \
#ifeqend
#ifeqend
#ifeqend
#ifeqend // invoke an function
\
GetServiceImpl(sSessionId, sInstanceId)->$(Member.Name)(\
#foreach $(Member.Params)
#ifneq($(Param.$Num),0) // param splitter
, \
#ifeqend // params
#ifeq($(Param.DataType.Type),generic)    // !!generic!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
rRequest["$(Param.Name)"]\
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
*rRequest.GetChildByLocalName("$(Param.Name)").Begin()\
#else
#ifeq($(Param.DataType.Type),struct||typedef||template)
$(Param.Name)\
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#end // end of function param list
);
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
    rOperation.Result().AppendChild(tResultDO);
#ifeqend // end of function invokation
#ifeq($(Member.Return.Type),struct||typedef||template) // result for structs and types
    rResult << tResult;
#ifeqend
  } else
#end
  {
    RISE_THROWS(staff::CRemoteException, "Unknown Operation: " + rOperation.GetName());
  }
}

const std::string& $(Class.Name)Wrapper::GetName() const
{
  return m_sName;
}

const std::string& $(Class.Name)Wrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::CComponent* $(Class.Name)Wrapper::GetComponent() const
{
  return m_pComponent;
}

staff::CComponent* $(Class.Name)Wrapper::GetComponent()
{
  return m_pComponent;
}

staff::IService* $(Class.Name)Wrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::CServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId).Get();
}

staff::IService* $(Class.Name)Wrapper::NewImpl()
{
  return new $(Class.Name)Impl;
}

$(Class.Name)Impl* $(Class.Name)Wrapper::GetServiceImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return static_cast<$(Class.Name)Impl*>(GetImpl(sSessionId, sInstanceId));
}

staff::CDataObject $(Class.Name)Wrapper::GetOperations() const
{
  staff::CDataObject tOperations("Operations");

#foreach $(Class.Members)
  {// Operation: $(Member.Return.NsName) $(Member.Name)($(Member.Params))$(Member.Const)
    staff::CDataObject tOp$(Member.Name) = tOperations.CreateChild("Operation");
    tOp$(Member.Name).CreateChild("Name", "$(Member.Name)");
    tOp$(Member.Name).CreateChild("IsConst", $(Member.IsConst));
    tOp$(Member.Name).CreateChild("RestMethod", "$(Member.Options.*restMethod)");
    tOp$(Member.Name).CreateChild("RestLocation", "$(Member.Options.*restLocation)");

    staff::CDataObject tOpReturn$(Member.Name) = tOp$(Member.Name).CreateChild("Return");
    tOpReturn$(Member.Name).CreateChild("Type", "$(Member.Return.Name)");
    tOpReturn$(Member.Name).CreateChild("IsConst", $(Member.Return.IsConst));

    staff::CDataObject tOp$(Member.Name)Params = tOp$(Member.Name).CreateChild("Parameters");
#foreach $(Member.Params)
    {
      staff::CDataObject tOpParam$(Param.Name) = tOp$(Member.Name)Params.CreateChild("Param");
      tOpParam$(Param.Name).CreateChild("Name", "$(Param.Name)");
      tOpParam$(Param.Name).CreateChild("Type", "$(Param.DataType.Name)");
      tOpParam$(Param.Name).CreateChild("IsConst", $(Param.DataType.IsConst));
      tOpParam$(Param.Name).CreateChild("IsRef", $(Param.DataType.IsRef));
    }
#end
  }
#end

  return tOperations;
}

staff::CDataObject $(Class.Name)Wrapper::GetServiceDescription() const
{
  staff::CDataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string $(Class.Name)Wrapper::m_sName = "$(Class.ServiceNsName)";
const std::string $(Class.Name)Wrapper::m_sDescr = \
#ifneq($(Class.Description),)
"$(Class.Description)";
#else
"Staff service $(Class.ServiceName)";
#ifeqend

$(Class.EndingNs)
#end
#ifeqend // #ifneq($(Interface.Classes.$Count),0)

