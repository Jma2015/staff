// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <string>
#include <map>
#include <rise/common/Exception.h>
#include <rise/common/MutablePtr.h>
#include <rise/common/ExceptionTemplate.h>
#include "$(Interface.Name)Context.h"
#include "$(Interface.Name)Impl.h"

#foreach $(Interface.Classes)
$(Class.OpeningNs)

  class $(Class.Name)Context::$(Class.Name)ContextImpl
  {
  public:
    typedef rise::CMutablePtr< $(Class.Name)Impl > P$(Class.ServiceName)Impl;
    typedef std::map<std::string, P$(Class.ServiceName)Impl> TServiceImplMap;
    TServiceImplMap m_mServices;
  };

  $(Class.Name)Context::$(Class.Name)Context():
    m_pImpl(new $(Class.Name)ContextImpl)
  {
  }

  $(Class.Name)Context::~$(Class.Name)Context()
  {
    if (m_pImpl != NULL)
      delete m_pImpl;
  }

  $(Class.Name)Context& $(Class.Name)Context::GetContext()
  {
    if (m_pInst == NULL)
      m_pInst = new $(Class.Name)Context;

    return *m_pInst;
  }

  $(Class.Name)Impl* $(Class.Name)Context::GetServiceImpl(const std::string& sID)
  {
    $(Class.Name)ContextImpl::TServiceImplMap::iterator itFind = m_pImpl->m_mServices.find(sID);
    if (itFind == m_pImpl->m_mServices.end())
    {
      const std::pair< $(Class.Name)ContextImpl::TServiceImplMap::iterator, bool >& tInsertResult = 
        m_pImpl->m_mServices.insert($(Class.Name)ContextImpl::TServiceImplMap::value_type(sID, $(Class.Name)ContextImpl::P$(Class.ServiceName)Impl(new $(Class.Name)Impl)));
      return tInsertResult.first->second;
    }

    return itFind->second;
  }

  const std::string& $(Class.Name)Context::GetServiceID(const $(Class.Name)Impl* pImpl) const
  {
    for($(Class.Name)ContextImpl::TServiceImplMap::const_iterator itService = m_pImpl->m_mServices.begin(); 
      itService != m_pImpl->m_mServices.end(); ++itService)
      if (itService->second == pImpl)
        return itService->first;

    RISE_THROWS(rise::CLogicNoItemException, "ID not found");
  }

  rise::CStringList $(Class.Name)Context::GetServiceIds() const
  {
    rise::CStringList lsServiceIds;

    for($(Class.Name)ContextImpl::TServiceImplMap::const_iterator itService = m_pImpl->m_mServices.begin();
      itService != m_pImpl->m_mServices.end(); ++itService)
    {
      lsServiceIds.push_back(itService->first);
    }

    return lsServiceIds;
  }

  $(Class.Name)Context* $(Class.Name)Context::m_pInst = NULL;
  $(Class.EndingNs)

#end

