// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <map>
#ifneq($(Interface.Classes.$Count),0)
#include <rise/common/SharedPtr.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Exception.h>
#include <staff/common/Operation.h>
#include <staff/common/Value.h>
#include <staff/common/IService.h>
#include <staff/common/Attribute.h>
#include <staff/component/ServiceInstanceManager.h>
#include "$(Interface.FilePath)$(Interface.Name)Impl.h"
#else // types only interface
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Value.h>
#include <staff/common/Attribute.h>
#ifeqend // #ifneq($(Interface.Classes.$Count),0)
#foreach $(Interface.Includes)
#include "$(Include.FilePath)$(Include.Name)Wrapper.h"
#end
#include "$(Interface.FilePath)$(Interface.Name)Wrapper.h"

#cginclude <common/Serialization.cpp>

#ifneq($(Interface.Classes.$Count),0)
#foreach $(Interface.Classes)

$(Class.OpeningNs)

$(Class.Name)Wrapper::$(Class.Name)Wrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

$(Class.Name)Wrapper::~$(Class.Name)Wrapper()
{
}

void $(Class.Name)Wrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  } else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                 rRequest.GetChildByLocalName("sInstanceId").GetText());
  } else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                               rRequest.GetChildByLocalName("sInstanceId").GetText());
  } else
  {
    rise::CSharedPtr<$(Class.Name)Impl> tpServiceImpl;
    tpServiceImpl = GetImpl(sSessionId, sInstanceId);
#foreach $(Class.Members)
    if (sOperationName == "$(Member.Name)")
    {
#ifneq($(Member.Options.*responseElement),)
      rOperation.SetResponseName("$(Member.Options.*responseElement)");
#else
#ifneq($(Member.Return.ResponseName),)
      rOperation.SetResponseName("$(Member.Return.ResponseName)");
#ifeqend
#ifeqend
#ifneq($(Member.Options.*resultElement),)
      rOperation.SetResultName("$(Member.Options.*resultElement)");
#ifeqend
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct||typedef||template||generic)
#ifneq($(Param.DataType.Name),staff::COperation||COperation||staff::Operation||Operation)
      $(Param.DataType.NsName) $(Param.Name);
#ifeqend
#ifeqend
#end
\
#foreach $(Member.Params)
#ifeq($(Param.DataType.Type),struct||typedef||template)
      rRequest.GetChildByLocalName("$(Param.Name)") >> $(Param.Name);
#else
#ifeq($(Param.DataType.Type),generic)
#ifneq($(Param.DataType.Name),staff::COperation||COperation||staff::Operation||Operation)
      rRequest.GetChildByLocalName("$(Param.Name)").GetValue($(Param.Name));
#ifeqend
#ifeqend
#ifeqend
#end
      \
#ifneq($(Member.Return.Name),void)      // !!not_void!!
#ifeq($(Member.Return.Type),struct||typedef||template)
$(Member.Return.NsName) tResult = \
#else
#ifeq($(Member.Return.Type),generic||string)    // !!generic!!
rOperation.Result().SetValue(\
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 
rOperation.Result().AppendChild(
#ifeqend
#ifeqend
#ifeqend
#ifeqend // invoke an function
\
tpServiceImpl->$(Member.Name)(\
#foreach $(Member.Params)
#ifneq($(Param.$Num),0) // param splitter
, \
#ifeqend // params
#ifeq($(Param.DataType.Name),staff::CMessageContext||CMessageContext||staff::MessageContext||MessageContext)
rOperation.GetMessageContext()\
#else
#ifeq($(Param.DataType.Name),staff::COperation||COperation||staff::Operation||Operation)
rOperation\
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
rRequest.GetChildByLocalName("$(Param.Name)").GetText()\
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
rRequest.GetChildByLocalName("$(Param.Name)").FirstChild()\
#else
#ifeq($(Param.DataType.Type),struct||typedef||template||generic)
$(Param.Name)\
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#end // end of function param list
\
#ifneq($(Member.Return.Name),void)
#ifeq($(Member.Return.Type),generic||string||dataobject)
)\
#ifeqend
#ifeqend
);
\
#ifeq($(Member.Return.Type),struct||typedef||template) // result for structs and types
      staff::DataObject& rdoResult = rOperation.Result();
      rdoResult << tResult;
#ifeqend
    } else
#end
    {
      RISE_THROWS(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }
  }
}

const std::string& $(Class.Name)Wrapper::GetName() const
{
  return m_sName;
}

const std::string& $(Class.Name)Wrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* $(Class.Name)Wrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* $(Class.Name)Wrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& $(Class.Name)Wrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService $(Class.Name)Wrapper::NewImpl()
{
  return new $(Class.Name)Impl;
}

bool $(Class.Name)Wrapper::IsLoadAtStartup() const
{
  return \
#ifeq($(Class.Options.*loadAtStartup),true)
true;
#else
false;
#ifeqend
}

std::string $(Class.Name)Wrapper::GetDependencies() const
{
  return "$(Class.Options.*dependencies)";
}

staff::DataObject $(Class.Name)Wrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

#foreach $(Class.Members)
  {// Operation: $(Member.Return.NsName) $(Member.Name)($(Member.Params))$(Member.Const)
    staff::DataObject tOp$(Member.Name) = tOperations.CreateChild("Operation");
    tOp$(Member.Name).CreateChild("Name", "$(Member.Name)");
    tOp$(Member.Name).CreateChild("RestMethod", "$(Member.Options.*restMethod)");
    tOp$(Member.Name).CreateChild("RestLocation", "$(Member.Options.*restLocation)");
  }
#end

  return tOperations;
}

staff::DataObject $(Class.Name)Wrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string $(Class.Name)Wrapper::m_sName = "$(Class.ServiceNsName)";
const std::string $(Class.Name)Wrapper::m_sDescr = \
#ifneq($(Class.Description),)
"$(Class.Description)";
#else
"Staff service $(Class.ServiceName)";
#ifeqend

$(Class.EndingNs)
#end
#ifeqend // #ifneq($(Interface.Classes.$Count),0)

