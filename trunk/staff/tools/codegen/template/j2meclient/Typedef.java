// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT
\
#var currentNs $(Typedef.Namespace.!trim/:/.!dot)
#ifneq($($currentNs),)

package $($currentNs);
#ifeqend

#ifeq($(Typedef.DataType.IsTemplate),1)
#var templateParam1 $(Typedef.DataType.TemplateParams.TemplateParam1.!trim/:/.!dot)
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),struct||typedef)
import $($templateParam1);
#ifeqend
#ifeq($(Typedef.DataType.TemplateParams.$Count),2)
#var templateParam2 $(Typedef.DataType.TemplateParams.TemplateParam2.!trim/:/.!dot)
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam2.Type),struct||typedef)
import $($templateParam2);
#ifeqend
#ifeqend
#ifeqend // is template
#ifeq($(Typedef.DataType.IsTemplate),1)
import java.util.*;
#ifeqend
import org.kxml2.kdom.*;


#ifeq($(Typedef.DataType.IsTemplate),1)
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),string)
#var templateParam1Type String
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),bool)
#var templateParam1Type Boolean
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),byte)
#var templateParam1Type Byte
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),int)
#var templateParam1Type Integer
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),short)
#var templateParam1Type Short
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),long)
#var templateParam1Type Long
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),float)
#var templateParam1Type Float
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),double)
#var templateParam1Type Double
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),dataobject)
#var templateParam1Type Node
#else
#var templateParam1Type $(Typedef.DataType.TemplateParams.TemplateParam1.UsedName.!trim/:/.!dot)
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#else
#ifeq($(Typedef.DataType.Type),string)
#var typedefType String
#else
#ifeq($(Typedef.DataType.Name),bool)
#var typedefType Boolean
#else
#ifeq($(Typedef.DataType.Name),byte)
#var typedefType Byte
#else
#ifeq($(Typedef.DataType.Name),int)
#var typedefType Integer
#else
#ifeq($(Typedef.DataType.Name),short)
#var typedefType Short
#else
#ifeq($(Typedef.DataType.Name),long)
#var typedefType Long
#else
#ifeq($(Typedef.DataType.Name),float)
#var typedefType Float
#else
#ifeq($(Typedef.DataType.Name),double)
#var typedefType Double
#else
#ifeq($(Typedef.DataType.Name),dataobject)
#var typedefType Node
#else
#var typedefType $(Typedef.DataType.UsedName.!trim/:/.!dot)
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend // is template


/* Typedef */
public class $(Typedef.Name)
{
#var typeName
#ifeq($(Typedef.DataType.IsTemplate),1)
#ifeq($(Typedef.DataType.Name),list||vector) // j2me does not support LinkedList etc..
#var typeName Vector
#else
#ifeq($(Typedef.DataType.Name),map)
//#var typeName HashTable
#cgerror map type is not supported currently
#else
#cgerror unknown container type: $(Typedef.DataType.Name)
#ifeqend
#ifeqend
#else      //  not a template
#ifeq($(Typedef.DataType.Type),string)
#var typeName String
#else
#ifeq($(Typedef.DataType.Name),bool)
#var typeName boolean
#else
#ifeq($(Typedef.DataType.Name),dataobject)
#var typeName Node
#else
#var typeName $(Typedef.DataType.UsedName.!trim/:/.!dot)
#ifeqend
#ifeqend
#ifeqend
#ifeqend // is template
  private $($typeName) m_tData;

  public $($typeName) Get()
  {
    return m_tData;
  }

  public void Set($($typeName) tData)
  {
    m_tData = tData;
  }

  public Node Serialize(Element tElement)
  {
#ifeq($(Typedef.DataType.IsTemplate),1)
//template $(Typedef.NsName)
#ifeq($(Typedef.DataType.Name),list||vector) // j2me does not support LinkedList etc..
    int nItems = m_tData.size();
    for (int nItem = 0; nItem < nItems; ++nItem)
    {
      $($templateParam1Type) tItem = ($($templateParam1Type))m_tData.elementAt(nItem);
      Element tItemElement = tElement.createElement("", "Item");

#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),generic)
      tItemElement.addChild(Node.TEXT, "" + tItem);
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),string)
      tItemElement.addChild(Node.TEXT, tItem);
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),dataobject)
      tItemElement.addChild(Node.ELEMENT, tItem);
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),typedef||struct)
      tItem.Serialize(tItemElement);
#else
#cgerror "Typedef.DataType.TemplateParams.TemplateParam1.Type = $(Typedef.DataType.TemplateParams.TemplateParam1.Type); Typedef.NsName = $(Typedef.NsName)"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
      tElement.addChild(Node.ELEMENT, tItemElement);
    }
#else
#cgerror unknown container type: $(Typedef.DataType.Name)
#ifeqend // list||vector
#else    // not a template
//not a template $(Typedef.NsName)
\
#ifeq($(Typedef.DataType.Type),generic)
    tElement.addChild(Node.TEXT, "" + m_tData);
#else
#ifeq($(Typedef.DataType.Type),string)
    tElement.addChild(Node.TEXT, m_tData);
#else
#ifeq($(Typedef.DataType.Type),dataobject)
    tElement.addChild(Node.ELEMENT, m_tData);
#else
#ifeq($(Typedef.DataType.Type),typedef||struct)
    m_tData.Serialize(tElement);
#else
#cgerror "Error: Typedef.DataType.Type = $(Typedef.DataType.Type); Typedef.NsName = $(Typedef.NsName)"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
\
#ifeqend // is template

    return tElement;
  }

  public $(Typedef.Name) Deserialize(Element tElement)
  {
#ifeq($(Typedef.DataType.IsTemplate),1)
//template $(Typedef.NsName)
    m_tData = new Vector();
    int nItems = tElement.getChildCount();
    for (int nItem = 0; nItem < nItems; ++nItem)
    {
      Element tItemElement = tElement.getElement(nItem);
      m_tData.addElement(\
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),generic)
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),byte)
new Byte(Byte.parseByte(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),int)
new Integer(Integer.parseInt(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),short)
new Short(Short.parseShort(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),long)
new Long(Long.parseLong(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),float)
new Float(Float.parseFloat(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),double)
new Double(Double.parseDouble(tItemElement.getText(0)))\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Name),bool)
new Boolean(tElement.getText(0) == "1" || tElement.getText(0).toLowerCase() == "true")\
#else
#cgerror generic return type "$(Typedef.DataType.TemplateParams.TemplateParam1.Name)" is not supported
#ifeqend // bool
#ifeqend // double
#ifeqend // float
#ifeqend // long
#ifeqend // short
#ifeqend // int
#ifeqend // byte
#else   // generic
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),string)
tElement.getText(0)\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),dataobject)
tElement\
#else
#ifeq($(Typedef.DataType.TemplateParams.TemplateParam1.Type),struct||typedef)
new $(Typedef.DataType.TemplateParams.TemplateParam1.UsedName.!trim/:/.!dot)().Deserialize(tItemElement)\
#else
#cgerror "Typedef.DataType.TemplateParams.TemplateParam1.Type = $(Typedef.DataType.TemplateParams.TemplateParam1.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
);
    }
#else  ///////////////////////////////////////////////////// not a template
//not a template $(Typedef.NsName)
#ifeq($(Typedef.DataType.Type),generic)
#ifeq($(Typedef.DataType.Name),byte)
    m_tData = Byte.parseByte(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),int)
    m_tData = Integer.parseInt(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),short)
    m_tData = Short.parseShort(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),long)
    m_tData = Long.parseLong(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),float)
    m_tData = Float.parseFloat(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),double)
    m_tData = Double.parseDouble(tElement.getText(0));
#else
#ifeq($(Typedef.DataType.Name),bool)
    m_tData = tElement.getText(0) == "1" || tElement.getText(0).toLowerCase() == "true";
#else
#cgerror generic return type "$(Typedef.DataType.Name)" is not supported
#ifeqend // bool
#ifeqend // double
#ifeqend // float
#ifeqend // long
#ifeqend // short
#ifeqend // int
#ifeqend // byte
#else   // generic
#ifeq($(Typedef.DataType.Type),string)
    m_tData = tElement.getText(0);
#else
#ifeq($(Typedef.DataType.Type),dataobject)
    m_tData = tElement;
#else
#ifeq($(Typedef.DataType.Type),struct||typedef)
    m_tData = new $(Typedef.DataType.UsedName.!trim/:/.!dot)().Deserialize(tElement);
#else
#cgerror "Typedef.DataType.Type = $(Typedef.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend // template
    return this;
  }
}

