// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT
\
#ifneq($(Interface.Namespace.!trim/:/),)

package $(Interface.Namespace.!trim/:/.!dot);
#ifeqend

import java.io.*;

import org.ksoap2.*;
import org.ksoap2.transport.*;
import org.kxml2.kdom.*;
import org.xmlpull.v1.*;
$($imports.!replace/|/\n/)

#foreach $(Interface.Classes)
public class $(Class.ServiceName)
{
  private HttpTransport m_tTransport;
  private String m_sTargetNamespace;
  private String m_sServiceUri;
  private String m_sSessionId;
  private String m_sInstanceId;

  // constructor
  public $(Class.ServiceName)(String sServiceUri, String sSessionId, String sInstanceId, String sTargetNamespace)
  {
    Init(sServiceUri, sSessionId, sInstanceId, sTargetNamespace);
  }

  public $(Class.ServiceName)(String sServiceUri)
  {
    Init(sServiceUri, null, null, null);
  }

  public $(Class.ServiceName)()
  {
    Init(null, null, null, null);
  }

  protected void Init(String sServiceUri, String sSessionId, String sInstanceId, String sTargetNamespace)
  {
    if (sServiceUri == null || sServiceUri == "")
    {
      sServiceUri = "http://localhost:9090/axis2/services/$(Class.ServiceNsName)";
    }

    if (sTargetNamespace == null || sTargetNamespace == "")
    {
      sTargetNamespace =\
#ifneq($(Interface.TargetNamespace),)
 "$(Interface.TargetNamespace)"\
#else
 "http://tempui.org/$(Class.ServiceNsName)"\
#ifeqend
;
    }

    m_tTransport = new HttpTransport(sServiceUri);
    m_sTargetNamespace = sTargetNamespace;
    m_sServiceUri = sServiceUri;
    m_sSessionId = sSessionId;
    m_sInstanceId = sInstanceId;
  }

  public String GetTargetNamespace()
  {
    return m_sTargetNamespace;
  }

  public String GetServiceUri()
  {
    return m_sServiceUri;
  }

  public String GetSessionId()
  {
    return m_sSessionId;
  }

  public String GetInstanceId()
  {
    return m_sInstanceId;
  }

#foreach $(Class.Members)

  public \
#ifeq($(Member.Return.Type),template)
#ifeq($(Member.Return.Name),list)
Vector\
#else
#cgerror unsupported container: $(Member.Return.NsName)
#ifeqend
#else
#ifeq($(Member.Return.Type),string)
String\
#else
#ifeq($(Member.Return.Type),dataobject)
Node\
#else
#ifeq($(Member.Return.Name),bool)
boolean\
#else
$(Member.Return.UsedName.!trim/:/.!dot)\
#ifeqend
#ifeqend
#ifeqend
#ifeqend
 $(Member.Name)(\
#foreach $(Member.Params)
#ifneq($(Param.$Num),0)
, \
#ifeqend
#ifeq($(Param.DataType.Type),template)
#ifeq($(Param.DataType.Name),list)
Vector\
#else
#cgerror unsupported container: $(Param.DataType.NsName)
#ifeqend
#else
#ifeq($(Param.DataType.Type),string)
String\
#else
#ifeq($(Param.DataType.Type),dataobject)
Node\
#else
#ifeq($(Param.DataType.Name),bool)
boolean\
#else
$(Param.DataType.UsedName.!trim/:/.!dot)\
#ifeqend
#ifeqend
#ifeqend
#ifeqend
 $(Param.Name)\
#end
) throws IOException, RuntimeException, XmlPullParserException
  {
    // create envelope
    SoapEnvelope tEnvelope = new SoapEnvelope(SoapEnvelope.VER\
#ifneq($(Class.Options.*soapVersion),)
$(Class.Options.*soapVersion.!replace/.//)\
#else
10\
#ifeqend
);

    // build request
    Element tRequestElement = new Node().createElement(m_sTargetNamespace, \
#ifneq($(Member.Options.*requestElement),)
"$(Member.Options.*requestElement)"\
#else
"$(Member.Name)"\
#ifeqend
);

#foreach $(Member.Params)
    Element tParam$(Param.Name) = tRequestElement.createElement("", "$(Param.Name)");
#ifeq($(Param.DataType.Type),template)
#ifeq($(Param.DataType.Name),list)
    int nItems = $(Param.Name).size();
    for (int nItem = 0; nItem < nItems; ++nItem)
    {
      Element tItemElement = tParam$(Param.Name).createElement("", "Item");
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),generic)
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),bool)
#var itemType Boolean
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),byte)
#var itemType Byte
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),int)
#var itemType Integer
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),short)
#var itemType Short
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),long)
#var itemType Long
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),float)
#var itemType Float
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Name),double)
#var itemType Double
#else
#cgerror unsupported generic: $(Param.DataType.TemplateParams.TemplateParam1.Name)
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
      tItemElement.addChild(Node.TEXT, "" + ($($itemType))$(Param.Name).elementAt(nItem));
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),string)
      tItemElement.addChild(Node.TEXT, (String)$(Param.Name).elementAt(nItem));
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),dataobject)
      tItemElement.addChild(Node.ELEMENT, (Node)$(Param.Name).elementAt(nItem));
#else
#ifeq($(Param.DataType.TemplateParams.TemplateParam1.Type),struct||typedef)
      (($(Param.DataType.TemplateParams.TemplateParam1.UsedName.!trim/:/.!dot))$(Param.Name).elementAt(nItem)).Serialize(tItemElement);
#else
#cgerror "Param.DataType.TemplateParams.TemplateParam1.Type = $(Param.DataType.TemplateParams.TemplateParam1.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
      tParam$(Param.Name).addChild(Node.ELEMENT, tItemElement);
    }
#else
#cgerror unsupported container: $(Param.DataType.NsName)
#ifeqend
#else
#ifeq($(Param.DataType.Type),generic)    // !!generic!!
    tParam$(Param.Name).addChild(Node.TEXT, "" + $(Param.Name));
#else
#ifeq($(Param.DataType.Type),string)    // !!string!!
    tParam$(Param.Name).addChild(Node.TEXT, $(Param.Name));
#else
#ifeq($(Param.DataType.Type),dataobject) // !!dataobject!! 
    tParam$(Param.Name).addChild(Node.ELEMENT, $(Param.Name));
#else
#ifeq($(Param.DataType.Type),struct||typedef)
    $(Param.Name).Serialize(tParam$(Param.Name));
#else
#cgerror "Param.DataType.Type = $(Param.DataType.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
    tRequestElement.addChild(Node.ELEMENT, tParam$(Param.Name));

#end
    tEnvelope.bodyOut = tRequestElement;

    m_tTransport.call(\
#ifneq($(Member.Options.*soapAction),)
"$(Member.Options.*soapAction)"\
#else
null\
#ifeqend
, tEnvelope);
#ifneq($(Member.Return.Name),void)      // !!void!!

    // parse response
    Node tResultNode = (Node)tEnvelope.bodyIn;
    if (tResultNode.getElement(0).getName() == "Fault")
    {
      throw new RuntimeException("Soap Fault received: " + tResultNode.toString());
    }

    Element tResultElement = tResultNode.getElement(m_sTargetNamespace, \
#ifneq($(Member.Options.*responseElement),)
"$(Member.Options.*responseElement)"\
#else
"$(Member.Name)Result"\
#ifeqend
)\
#ifneq($(Member.Options.*resultElement),)
.getElement("", "$(Member.Options.*resultElement)")\
#ifeqend
;

#ifeq($(Member.Return.Type),template)
    Vector tResult = new Vector();
    int nItems = tElement.getChildCount();
    for (int nItem = 0; nItem < nItems; ++nItem)
    {
      Element tItemElement = tElement.getElement(nItem);
      tResult.addElement(\
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Type),generic)
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),byte)
new Byte(Byte.parseByte(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),int)
new Integer(Integer.parseInt(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),short)
new Short(Short.parseShort(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),long)
new Long(Long.parseLong(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),float)
new Float(Float.parseFloat(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),double)
new Double(Double.parseDouble(tItemElement.getText(0)))\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Name),bool)
new Boolean(tElement.getText(0) == "1" || tElement.getText(0).toLowerCase() == "true")\
#else
#cgerror generic return type "$(Member.Return.TemplateParams.TemplateParam1.Name)" is not supported
#ifeqend // bool
#ifeqend // double
#ifeqend // float
#ifeqend // long
#ifeqend // short
#ifeqend // int
#ifeqend // byte
#else   // generic
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Type),string)
tElement.getText(0)\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Type),dataobject)
tElement\
#else
#ifeq($(Member.Return.TemplateParams.TemplateParam1.Type),struct||typedef)
new $(Member.Return.TemplateParams.TemplateParam1.UsedName.!trim/:/.!dot)().Deserialize(tItemElement)\
#else
#cgerror "Member.Return.TemplateParams.TemplateParam1.Type = $(Member.Return.TemplateParams.TemplateParam1.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
);
    }

    return tResult;
#else
#ifeq($(Member.Return.Type),generic)    // !!generic!!
#ifeq($(Member.Return.Name),byte)
    return Byte.parseByte(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),int)
    return Integer.parseInt(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),short)
    return Short.parseShort(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),long)
    return Long.parseLong(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),float)
    return Float.parseFloat(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),double)
    return Double.parseDouble(tResultElement.getText(0));
#else
#ifeq($(Member.Return.Name),bool)
    return tResultElement.getText(0) == "1" || tResultElement.getText(0).toLowerCase() == "true";
#else
#cgerror generic return type "$(Member.Return.Name)" is not supported
#ifeqend // bool
#ifeqend // double
#ifeqend // float
#ifeqend // long
#ifeqend // short
#ifeqend // int
#ifeqend // byte
#else   // generic
#ifeq($(Member.Return.Type),string)    // !!string!!

    return tResultElement.getText(0);
#else
#ifeq($(Member.Return.Type),dataobject) // !!dataobject!! 

    return tResultElement;
#else
#ifeq($(Member.Return.Type),struct||typedef)

    return new $(Member.Return.UsedName.!trim/:/.!dot)().Deserialize(tResultElement);
#else
#cgerror "Member.Return.Type = $(Member.Return.Type);"
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
#ifeqend
  }
#end
}
#end

