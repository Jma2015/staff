// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Service Implementation

#include "IssuerImpl.h"

namespace samples
{
namespace sharedtypes
{

IssuerImpl::IssuerImpl():
  m_nLastIssuedId(0)
{
}

IssuerImpl::~IssuerImpl()
{
}

ticket::Ticket IssuerImpl::Issue(const std::string& sOwner)
{
  ticket::Ticket tResult;

  tResult.nId = ++m_nLastIssuedId;
  tResult.sOwner = sOwner;
  tResult.eType = ticket::Ticket::Primary;

  for (TicketMap::const_iterator itTicket = m_mIssuedTickets.begin();
    itTicket != m_mIssuedTickets.end(); ++itTicket)
  {
    if (itTicket->second.sOwner == sOwner)
    {
      tResult.eType = ticket::Ticket::Reissued;
      break;
    }
  }

  m_mIssuedTickets[tResult.nId] = tResult;

  return tResult;  // result
}

bool IssuerImpl::WasIssued(const ticket::Ticket& stTicket)
{
  bool tResult = false;
  TicketMap::const_iterator itTicket = m_mIssuedTickets.find(stTicket.nId);
  if (itTicket != m_mIssuedTickets.end())
  {
    if (itTicket->second.sOwner == stTicket.sOwner)
    {
      tResult = true;
    }
  }

  return tResult;
}

ticket::TicketsList IssuerImpl::GetAllTickets() const
{
  ticket::TicketsList lsTickets;

  for (TicketMap::const_iterator itTicket = m_mIssuedTickets.begin(); 
      itTicket != m_mIssuedTickets.end(); ++itTicket)
  {
    lsTickets.push_back(itTicket->second);
  }

  return lsTickets;
}


}
}

