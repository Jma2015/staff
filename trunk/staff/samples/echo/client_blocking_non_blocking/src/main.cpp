// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <memory>
#include <rise/common/Log.h>
#include <rise/threading/Thread.h>
#include <staff/common/DataObject.h>
#include <staff/client/ICallback.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "Echo.h"

// callbacks
// callback for Echo::EchoString
class EchoEchoStringCallback: public staff::ICallback< const std::string& >
{
public:
  virtual void OnComplete(const std::string& tResult)
  {
    // process result here
    rise::LogInfo() << "EchoString(asynch) result: " << tResult;
  }

  void OnFault(const staff::CDataObject& rFault)
  {
    // process error here
    rise::LogError() << rFault.ToString();
  }
};



int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  try
  {
    std::auto_ptr< Echo > pEcho1(::staff::CServiceFactory::Inst().GetService< Echo >());
    std::auto_ptr< Echo > pEcho2(::staff::CServiceFactory::Inst().GetService< Echo >());

    RISE_ASSERTS(pEcho1.get(), "Cannot get client for service echo!");
    RISE_ASSERTS(pEcho2.get(), "Cannot get client for service echo!");

    // Invoke Your service here:
    EchoEchoStringCallback tEchoEchoStringCallback;
    pEcho1->EchoString("Hello World! (asynch)", tEchoEchoStringCallback);

    // using second client to call service while first client processing request
    std::string tEchoStringResult = pEcho2->EchoString("Hello World! (synch)");
    rise::LogInfo() << "EchoString result: " << tEchoStringResult;

    // Wait for asynch call is completed
    while (!tEchoEchoStringCallback.IsCompleted())
    {
      rise::threading::CThread::Sleep(1000);
    }

  }
  RISE_CATCH_ALL

  return 0;
}

