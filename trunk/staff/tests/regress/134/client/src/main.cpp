// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <signal.h>
#include <execinfo.h>
#include <memory>
#include <axutil_thread.h>
#include <axis2_util.h>
#include <rise/common/Log.h>
#include <rise/tools/StackTracer.h>
#include <staff/common/DataObject.h>
#include <staff/client/ICallback.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "Echo.h"

static void OnSignal(int nSignal)
{
  if (nSignal == SIGSEGV || nSignal == SIGABRT)
  {
    std::string sTracedStack;
    rise::tools::CStackTracer::StackTraceStr(sTracedStack);
    rise::LogError() << "Segmentation fault.\nTraced stack:\n" << sTracedStack;
    exit(1);
  }
}

void* Run(axutil_thread_t*, void*)
{
  try
  {
    for (int i = 0; i < 30; ++i)
    {
      std::auto_ptr< Echo > pEcho(::staff::ServiceFactory::Inst().GetService< Echo >());
      RISE_ASSERTS(pEcho.get(), "Cannot get client for service echo!");
    }
  }
  RISE_CATCH_ALL

  return NULL;
}


int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  static const int nThreadCount = 30;
  axutil_thread_t* pThread[nThreadCount];

  signal(SIGSEGV, OnSignal);
  signal(SIGABRT, OnSignal);


  axutil_env_t *env = NULL;
  env = axutil_env_create_all("echo_blocking_test.log", AXIS2_LOG_LEVEL_TRACE);


  for (int nTh = 0; nTh < nThreadCount; ++nTh)
  {
    pThread[nTh] = axutil_thread_create(env->allocator, NULL, &Run, NULL);
    if (!pThread[nTh])
    {
      fprintf(stderr, "failed to create axutil thread");
      return 1;
    }
  }

  for (int nTh = 0; nTh < nThreadCount; ++nTh)
  {
    axutil_thread_join(pThread[nTh]);
  }

  rise::LogInfo() << "Done";
  AXIS2_SLEEP(1);

  return 0;
}

