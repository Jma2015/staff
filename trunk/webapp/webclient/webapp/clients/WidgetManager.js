// This file generated by staff_codegen
// DO NOT EDIT
if (typeof widget == 'undefined')
{
  widget = {};
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators
function SerializeStruct_SWidgetClass(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sClass', rstStruct.sClass, tNode);
  tOperation.AddParameter('sDescr', rstStruct.sDescr, tNode);
}

function SerializeStruct_SProperty(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  tOperation.AddParameter('tValue', rstStruct.tValue, tNode);
}

function SerializeStruct_SWidget(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sClass', rstStruct.sClass, tNode);
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  SerializeTypedef_TPropertyList(tOperation, rstStruct.lsProperties, tOperation.AddParameter('lsProperties', '', tNode));
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct deserializators
function DeserializeStruct_SWidgetClass(tOperation, tNode)
{
  var tResult = 
  {
    sClass: null,
    sDescr: null
  };

  tResult.sClass = tOperation.SubNodeText("sClass", tNode);
  tResult.sDescr = tOperation.SubNodeText("sDescr", tNode);
  return tResult;
}

function DeserializeStruct_SProperty(tOperation, tNode)
{
  var tResult = 
  {
    sName: null,
    tValue: null
  };

  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.tValue = tOperation.SubNodeText("tValue", tNode);
  return tResult;
}

function DeserializeStruct_SWidget(tOperation, tNode)
{
  var tResult = 
  {
    sClass: null,
    sName: null,
    lsProperties: null
  };

  tResult.sClass = tOperation.SubNodeText("sClass", tNode);
  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.lsProperties = DeserializeTypedef_TPropertyList(tOperation, tOperation.SubNode("lsProperties", tNode));
  return tResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

// TWidgetClassList  Typedef.DataType.Type template std::list
function SerializeTypedef_TWidgetClassList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_SWidgetClass(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

// TPropertyList  Typedef.DataType.Type template std::list
function SerializeTypedef_TPropertyList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_SProperty(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

// TWidgetMap  Typedef.DataType.Type template std::map
function SerializeTypedef_TWidgetMap(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
    var tItem = tOperation.AddParameter('Item', '', tNode);
    tOperation.AddParameter('Key', rtType[i].key, tItem);
    SerializeStruct_SWidget(tOperation, rtType[i], tOperation.AddParameter('Value', '', tItem));
  }
  return tNode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
function DeserializeTypedef_TWidgetClassList(tOperation, tNode)
{
// container :: std::list

  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<SWidgetClass>
    aResult[j++] = DeserializeStruct_SWidgetClass(tOperation, tResult.childNodes[i]); // *** struct SWidgetClass
    }
  }

  return aResult;
}

function DeserializeTypedef_TPropertyList(tOperation, tNode)
{
// container :: std::list

  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<SProperty>
    aResult[j++] = DeserializeStruct_SProperty(tOperation, tResult.childNodes[i]); // *** struct SProperty
    }
  }

  return aResult;
}

function DeserializeTypedef_TWidgetMap(tOperation, tNode)
{
// container :: std::map

  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::map<int, SWidget>
      var tResultPair = 
      {
        key: null,
        value: null  
      };
    
      var pKey = tOperation.SubNode("Key", tResult.childNodes[i]);
      var pValue = tOperation.SubNode("Value", tResult.childNodes[i]);

      tResultPair.key = pKey.firstChild.nodeValue; // *** generic int
      tResultPair.value = DeserializeStruct_SWidget(tOperation, pValue); // *** struct SWidget
      aResult[j++] = tResultPair;
    }
  }

  return aResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////
// class: WidgetManager

widget.WidgetManager = Class.create();
widget.WidgetManager.tClient = null;
widget.WidgetManager.prototype = 
{
  initialize: function(sServiceName, sHostName, sHostPort)
  {
    if(sServiceName == null)
      sServiceName = 'widget.WidgetManager';
    this.tClient = new staff.Client(sServiceName, sHostName, sHostPort);
  },
  
  SetID: function(sID)
  {
    this.tClient.SetID(sID);
  },

  Open: function(sWidgetDB)
  {
    var tOperation = new staff.Operation('Open', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('sWidgetDB', sWidgetDB);
    this.tClient.InvokeOperation(tOperation);
  },

  Close: function()
  {
    var tOperation = new staff.Operation('Close', this.tClient.GetServiceUri());
    
    this.tClient.InvokeOperation(tOperation);
  },

  Commit: function()
  {
    var tOperation = new staff.Operation('Commit', this.tClient.GetServiceUri());
    
    this.tClient.InvokeOperation(tOperation);
  },

  GetWidgetClassList: function()
  {
    var tOperation = new staff.Operation('GetWidgetClassList', this.tClient.GetServiceUri());
    
    this.tClient.InvokeOperation(tOperation);

    return DeserializeTypedef_TWidgetClassList(tOperation);
  },

  GetWidgetList: function()
  {
    var tOperation = new staff.Operation('GetWidgetList', this.tClient.GetServiceUri());
    
    this.tClient.InvokeOperation(tOperation);

    return DeserializeTypedef_TWidgetMap(tOperation);
  },

  AddWidget: function(rWidget)
  {
    var tOperation = new staff.Operation('AddWidget', this.tClient.GetServiceUri());
    
    SerializeStruct_SWidget(tOperation, rWidget, tOperation.AddParameter('rWidget'));
    this.tClient.InvokeOperation(tOperation);

    return tOperation.ResultElement().firstChild.nodeValue;
  },

  DeleteWidget: function(nWidgetID)
  {
    var tOperation = new staff.Operation('DeleteWidget', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('nWidgetID', nWidgetID);
    this.tClient.InvokeOperation(tOperation);
  },

  AlterWidget: function(nWidgetID, rWidget)
  {
    var tOperation = new staff.Operation('AlterWidget', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('nWidgetID', nWidgetID);
    SerializeStruct_SWidget(tOperation, rWidget, tOperation.AddParameter('rWidget'));
    this.tClient.InvokeOperation(tOperation);
  }
}

