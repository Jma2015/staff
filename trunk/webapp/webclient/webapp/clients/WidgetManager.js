// This file generated by staff_codegen
// DO NOT EDIT
namespace('widget');

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators
function SerializeStruct_widget_SWidgetClass(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sClass', rstStruct.sClass, tNode);
  tOperation.AddParameter('sDescr', rstStruct.sDescr, tNode);
}

function SerializeStruct_widget_SProperty(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  tOperation.AddParameter('tValue', rstStruct.tValue, tNode);
}

function SerializeStruct_widget_SWidget(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('sClass', rstStruct.sClass, tNode);
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  SerializeTypedef_widget_TPropertyList(tOperation, rstStruct.lsProperties, tOperation.AddParameter('lsProperties', '', tNode));
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct deserializators
function DeserializeStruct_widget_SWidgetClass(tOperation, tNode)
{
  var tResult = {};

  tResult.sClass = tOperation.SubNodeText("sClass", tNode);
  tResult.sDescr = tOperation.SubNodeText("sDescr", tNode);
  return tResult;
}

function DeserializeStruct_widget_SProperty(tOperation, tNode)
{
  var tResult = {};

  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.tValue = tOperation.SubNodeText("tValue", tNode);
  return tResult;
}

function DeserializeStruct_widget_SWidget(tOperation, tNode)
{
  var tResult = {};

  tResult.sClass = tOperation.SubNodeText("sClass", tNode);
  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.lsProperties = DeserializeTypedef_widget_TPropertyList(tOperation, tOperation.SubNode("lsProperties", tNode));
  return tResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

// ::widget::TWidgetClassList  Typedef.DataType.Type template std::list
function SerializeTypedef_widget_TWidgetClassList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_widget_SWidgetClass(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

// ::widget::TPropertyList  Typedef.DataType.Type template std::list
function SerializeTypedef_widget_TPropertyList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_widget_SProperty(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

// ::widget::TWidgetMap  Typedef.DataType.Type template std::map
function SerializeTypedef_widget_TWidgetMap(tOperation, rtType, tNode)
{
  for(var tKey in rtType)
  {
    if(typeof tKey != 'function')
    {
      var tItem = tOperation.AddParameter('Item', '', tNode);
      tOperation.AddParameter('Key', tKey, tItem);
      SerializeStruct_widget_SWidget(tOperation, rtType[tKey], tOperation.AddParameter('Value', '', tItem));
    }
  }
  return tNode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
function DeserializeTypedef_widget_TWidgetClassList(tOperation, tNode)
{
// container :: std::list< ::widget::SWidgetClass >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<::widget::SWidgetClass>
    aResult[j++] = DeserializeStruct_widget_SWidgetClass(tOperation, tResult.childNodes[i]); // *** struct ::widget::SWidgetClass
    }
  }

  return aResult;
}

function DeserializeTypedef_widget_TPropertyList(tOperation, tNode)
{
// container :: std::list< ::widget::SProperty >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<::widget::SProperty>
    aResult[j++] = DeserializeStruct_widget_SProperty(tOperation, tResult.childNodes[i]); // *** struct ::widget::SProperty
    }
  }

  return aResult;
}

function DeserializeTypedef_widget_TWidgetMap(tOperation, tNode)
{
// container :: std::map< int, ::widget::SWidget >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = {};

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::map<int, ::widget::SWidget>
      var pKeyElem = tOperation.SubNode("Key", tResult.childNodes[i]);
      var pValueElem = tOperation.SubNode("Value", tResult.childNodes[i]);

      var tKey = pKeyElem.firstChild != null ? pKeyElem.firstChild.nodeValue : ""; // *** generic int
      var tValue = DeserializeStruct_widget_SWidget(tOperation, pValueElem); // *** struct ::widget::SWidget
      aResult[tKey] = tValue;
    }
  }

  return aResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////
// class: widget.WidgetManager

widget.WidgetManager = Class.create();
widget.WidgetManager.tClient = null;
widget.WidgetManager.prototype = 
{
  initialize: function(sServiceName, sHostName, sHostPort)
  {
    if(sServiceName == null)
    {
      sServiceName = 'widget.WidgetManager';
    }
    this.tClient = new staff.Client(sServiceName, sHostName, sHostPort);
  },
  
  SetID: function(sID)
  {
    this.tClient.SetID(sID);
  },

  Open: function(sWidgetDB, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Open', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('sWidgetDB', sWidgetDB);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  Close: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Close', this.tClient.GetServiceUri());
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  Commit: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Commit', this.tClient.GetServiceUri());
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  GetWidgetClassList: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetWidgetClassList', this.tClient.GetServiceUri());
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_widget_TWidgetClassList(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_widget_TWidgetClassList(tOperation);
    }
  },

  GetWidgetList: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetWidgetList', this.tClient.GetServiceUri());
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_widget_TWidgetMap(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_widget_TWidgetMap(tOperation);
    }
  },

  AddWidget: function(rWidget, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AddWidget', this.tClient.GetServiceUri());
    
    SerializeStruct_widget_SWidget(tOperation, rWidget, tOperation.AddParameter('rWidget'));
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation.ResultElement().firstChild != null ? tOperation.ResultElement().firstChild.nodeValue : "", tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return tOperation.ResultElement().firstChild != null ? tOperation.ResultElement().firstChild.nodeValue : "";
    }
  },

  DeleteWidget: function(nWidgetID, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('DeleteWidget', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('nWidgetID', nWidgetID);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  AlterWidget: function(nWidgetID, rWidget, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AlterWidget', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('nWidgetID', nWidgetID);
    SerializeStruct_widget_SWidget(tOperation, rWidget, tOperation.AddParameter('rWidget'));
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  }
}

