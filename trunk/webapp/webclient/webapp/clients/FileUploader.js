// This file generated by staff_codegen
// DO NOT EDIT
namespace('webapp');

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct deserializators

//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators

//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////
// class: webapp.FileUploader

webapp.FileUploader = Class.create();
webapp.FileUploader.tClient = null;
webapp.FileUploader.prototype = 
{
  initialize: function(sServiceName, sHostName, sHostPort)
  {
    if(sServiceName == null)
    {
      sServiceName = 'webapp.FileUploader';
    }
    this.tClient = new staff.Client(sServiceName, sHostName, sHostPort);
  },
  
  SetID: function(sID)
  {
    this.tClient.SetID(sID);
  },

  Move: function(sFileName, sPathTo, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Move', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('sFileName', sFileName);
    tOperation.AddParameter('sPathTo', sPathTo);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  Unpack: function(sFileName, sPathTo, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Unpack', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('sFileName', sFileName);
    tOperation.AddParameter('sPathTo', sPathTo);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  GetUnpackingStatus: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetUnpackingStatus', this.tClient.GetServiceUri());
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation.ResultElement().firstChild != null ? tOperation.ResultElement().firstChild.nodeValue : "", tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return tOperation.ResultElement().firstChild != null ? tOperation.ResultElement().firstChild.nodeValue : "";
    }
  },

  Delete: function(sFileName, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Delete', this.tClient.GetServiceUri());
    
    tOperation.AddParameter('sFileName', sFileName);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  }
}

