// This file generated by staff_codegen
// DO NOT EDIT
namespace('staff.admin');

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators
function SerializeStruct_staff_admin_SUser(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('nId', rstStruct.nId, tNode);
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  tOperation.AddParameter('sDescription', rstStruct.sDescription, tNode);
}

function SerializeStruct_staff_admin_SGroup(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('nId', rstStruct.nId, tNode);
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  tOperation.AddParameter('sDescription', rstStruct.sDescription, tNode);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct deserializators
function DeserializeStruct_staff_admin_SUser(tOperation, tNode)
{
  var tResult = {};

  tResult.nId = tOperation.SubNodeText("nId", tNode);
  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.sDescription = tOperation.SubNodeText("sDescription", tNode);
  return tResult;
}

function DeserializeStruct_staff_admin_SGroup(tOperation, tNode)
{
  var tResult = {};

  tResult.nId = tOperation.SubNodeText("nId", tNode);
  tResult.sName = tOperation.SubNodeText("sName", tNode);
  tResult.sDescription = tOperation.SubNodeText("sDescription", tNode);
  return tResult;
}

//-----------------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

// ::staff::admin::TIdList  Typedef.DataType.Type template std::list
function SerializeTypedef_staff_admin_TIdList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = generic
  tOperation.AddParameter('Item', rtType[i], tNode);
  }
  return tNode;
}

// ::staff::admin::TUserList  Typedef.DataType.Type template std::list
function SerializeTypedef_staff_admin_TUserList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_staff_admin_SUser(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

// ::staff::admin::TGroupList  Typedef.DataType.Type template std::list
function SerializeTypedef_staff_admin_TGroupList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_staff_admin_SGroup(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
function DeserializeTypedef_staff_admin_TIdList(tOperation, tNode)
{
// container :: std::list< int >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<int>
    aResult[j++] = tResult.childNodes[i].firstChild != null ? tResult.childNodes[i].firstChild.nodeValue : ""; // *** generic int
    }
  }

  return aResult;
}

function DeserializeTypedef_staff_admin_TUserList(tOperation, tNode)
{
// container :: std::list< ::staff::admin::SUser >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<::staff::admin::SUser>
    aResult[j++] = DeserializeStruct_staff_admin_SUser(tOperation, tResult.childNodes[i]); // *** struct ::staff::admin::SUser
    }
  }

  return aResult;
}

function DeserializeTypedef_staff_admin_TGroupList(tOperation, tNode)
{
// container :: std::list< ::staff::admin::SGroup >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == "Item")
    {
//template std::list<::staff::admin::SGroup>
    aResult[j++] = DeserializeStruct_staff_admin_SGroup(tOperation, tResult.childNodes[i]); // *** struct ::staff::admin::SGroup
    }
  }

  return aResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////
// class: staff.admin.AccountAdmin

staff.admin.AccountAdmin = Class.create();
staff.admin.AccountAdmin.prototype = 
{
  initialize: function(sServiceUri, sSessionId, sTargetNamespace)
  {
    if (!sServiceUri)
    {
      sServiceUri = webapp.Env.protocol + Session.sHost + (Session.sPort ? (':' + Session.sPort) : '') + '/axis2/services/staff.admin.AccountAdmin';
    }
    
    if (!sTargetNamespace)
    {
      sTargetNamespace = sServiceUri;
    }
    
    this.sTargetNamespace = sTargetNamespace || sServiceUri;

    this.tClient = new staff.Client(sServiceUri, sSessionId || Session.sID || "");
  },
  
  SetID: function(sSessionId)
  {
    this.tClient.SetSessionId(sSessionId);
  },

  GetUsers: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetUsers', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_staff_admin_TUserList(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_staff_admin_TUserList(tOperation);
    }
  },

  GetGroups: function(pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetGroups', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_staff_admin_TGroupList(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_staff_admin_TGroupList(tOperation);
    }
  },

  GetUserGroups: function(nUserId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetUserGroups', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_staff_admin_TIdList(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_staff_admin_TIdList(tOperation);
    }
  },

  AddUser: function(sUserName, sDescription, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AddUser', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('sUserName', sUserName);
    tOperation.AddParameter('sDescription', sDescription);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation.ResultValue(), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return tOperation.ResultValue();
    }
  },

  RemoveUser: function(nUserId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('RemoveUser', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  SetUserPassword: function(nUserId, sPass, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('SetUserPassword', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    tOperation.AddParameter('sPass', sPass);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  AddGroup: function(sGroupName, sDescription, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AddGroup', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('sGroupName', sGroupName);
    tOperation.AddParameter('sDescription', sDescription);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation.ResultValue(), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return tOperation.ResultValue();
    }
  },

  RemoveGroup: function(nGroupId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('RemoveGroup', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nGroupId', nGroupId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  AddUserToGroup: function(nUserId, nGroupId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AddUserToGroup', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    tOperation.AddParameter('nGroupId', nGroupId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  AddUserToGroups: function(nUserId, rlsGroupIds, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('AddUserToGroups', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    SerializeTypedef_staff_admin_TIdList(tOperation, rlsGroupIds, tOperation.AddParameter('rlsGroupIds'));
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  RemoveUserFromGroup: function(nUserId, nGroupId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('RemoveUserFromGroup', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    tOperation.AddParameter('nGroupId', nGroupId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  RemoveUserFromGroups: function(nUserId, rlsGroupIds, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('RemoveUserFromGroups', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction("");
    
    tOperation.AddParameter('nUserId', nUserId);
    SerializeTypedef_staff_admin_TIdList(tOperation, rlsGroupIds, tOperation.AddParameter('rlsGroupIds'));
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  }
}

