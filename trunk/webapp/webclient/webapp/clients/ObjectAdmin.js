// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT
namespace('staff.admin');

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators
function SerializeStruct_staff_admin_SObject(tOperation, rstStruct, tNode)
{
  tOperation.AddParameter('nId', rstStruct.nId, tNode);
  tOperation.AddParameter('sName', rstStruct.sName, tNode);
  tOperation.AddParameter('sDescription', rstStruct.sDescription, tNode);
  tOperation.AddParameter('nParentId', rstStruct.nParentId, tNode);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct deserializators
function DeserializeStruct_staff_admin_SObject(tOperation, tNode)
{
  var tResult = {};
  tResult.nId = tOperation.SubNodeText('nId', tNode);
  tResult.sName = tOperation.SubNodeText('sName', tNode);
  tResult.sDescription = tOperation.SubNodeText('sDescription', tNode);
  tResult.nParentId = tOperation.SubNodeText('nParentId', tNode);
  return tResult;
}

//-----------------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

// ::staff::admin::TObjectList  Typedef.DataType.Type template std::list
function SerializeTypedef_staff_admin_TObjectList(tOperation, rtType, tNode)
{
  for(var i = 0; i != rtType.length; ++i)
  {
// Typedef.DataType.TemplateParams.TemplateParam1.Type = struct
    SerializeStruct_staff_admin_SObject(tOperation, rtType[i], tOperation.AddParameter('Item', '', tNode));
  }
  return tNode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
function DeserializeTypedef_staff_admin_TObjectList(tOperation, tNode)
{
// container :: std::list< ::staff::admin::SObject >
  var tItem = null;

  var tResult = tNode == null ? tOperation.ResultElement() : tNode;
  var aResult = new Array();
  var j = 0;

  for (var i = 0; i < tResult.childNodes.length; i++)
  {
    if( tResult.childNodes[i].nodeName == 'Item')
    {
//template std::list<::staff::admin::SObject>
    aResult[j++] = DeserializeStruct_staff_admin_SObject(tOperation, tResult.childNodes[i]); // *** struct ::staff::admin::SObject
    }
  }

  return aResult;
}


//-----------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////
// class: staff.admin.ObjectAdmin

staff.admin.ObjectAdmin = Class.create();
staff.admin.ObjectAdmin.prototype =
{
  initialize: function(sServiceUri, sSessionId, sInstanceId, sTargetNamespace)
  {
    if (!sServiceUri)
    {
      sServiceUri = webapp.Env.protocol + Session.sHost + (Session.sPort ? (':' + Session.sPort) : '') + '/axis2/services/staff.admin.ObjectAdmin';
    }

    if (!sTargetNamespace)
    {
      sTargetNamespace = sServiceUri;
    }

    this.sTargetNamespace = sTargetNamespace || sServiceUri;

    this.tClient = new staff.Client(sServiceUri, sSessionId || Session.sID || '', sInstanceId);
  },

  destroy: function()
  {
    this.tClient && this.tClient.destroy();
  },

  SetDataObjectAsXml: function(bDataObjectAsXml)
  {
    this.bDataObjectAsXml = bDataObjectAsXml;
  },

  SetID: function(sSessionId)
  {
    this.tClient.SetSessionId(sSessionId);
  },

  GetById: function(nId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetById', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    tOperation.AddParameter('nId', nId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeStruct_staff_admin_SObject(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeStruct_staff_admin_SObject(tOperation);
    }
  },

  GetByPathName: function(sPathName, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetByPathName', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    tOperation.AddParameter('sPathName', sPathName);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeStruct_staff_admin_SObject(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeStruct_staff_admin_SObject(tOperation);
    }
  },

  GetChilds: function(nId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('GetChilds', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    tOperation.AddParameter('nId', nId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(DeserializeTypedef_staff_admin_TObjectList(tOperation), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return DeserializeTypedef_staff_admin_TObjectList(tOperation);
    }
  },

  Add: function(rstObject, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Add', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    SerializeStruct_staff_admin_SObject(tOperation, rstObject, tOperation.AddParameter('rstObject'));
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation.ResultValue(), tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);

      return tOperation.ResultValue();
    }
  },

  Remove: function(nObjectId, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('Remove', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    tOperation.AddParameter('nObjectId', nObjectId);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  },

  SetDescription: function(nObjectId, sDescription, pOnComplete, pOnError)
  {
    var tOperation = new staff.Operation('SetDescription', this.sTargetNamespace, '', '');
    tOperation.SetSoapAction('');

    tOperation.AddParameter('nObjectId', nObjectId);
    tOperation.AddParameter('sDescription', sDescription);
    if(typeof pOnComplete == 'function')
    { // make async call
      this.tClient.InvokeOperation(tOperation,
        function(tOperation)
        {
          pOnComplete(tOperation);
        },
        pOnError
      );
    }
    else
    {
      this.tClient.InvokeOperation(tOperation);
    }
  }
}


