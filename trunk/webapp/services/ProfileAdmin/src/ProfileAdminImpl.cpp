// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Service Implementation

#include <rise/string/String.h>
#include <rise/tools/FileFind.h>
#include <rise/xml/XMLDocument.h>
#include <rise/xml/XMLNode.h>
#include <staff/common/Runtime.h>
#include "ProfileAdminImpl.h"

namespace webapp
{
namespace admin
{

CProfileAdminImpl::CProfileAdminImpl()
{
}

CProfileAdminImpl::~CProfileAdminImpl()
{
}

::webapp::admin::TStringList CProfileAdminImpl::GetProfileList()
{
  ::webapp::admin::TStringList tResult;

  rise::CFileFind::Find(m_sProfilesPath, tResult, "widgetdb_classes.*.xml", rise::CFileFind::EFA_FILE);
  for (::webapp::admin::TStringList::iterator itFile = tResult.begin(); itFile != tResult.end(); ++itFile)
  {
    *itFile = itFile->substr(17, itFile->size() - 17 - 4);
  }

  return tResult;  // result
}

void CProfileAdminImpl::RemoveProfile(const std::string& sName)
{
  unlink((m_sProfilesPath + "widgetdb_classes." + sName + ".xml").c_str());
}

::webapp::admin::SProfile CProfileAdminImpl::GetProfile(const std::string& sName)
{
  ::webapp::admin::SProfile tResult;
  rise::xml::CXMLDocument tDoc;

  tDoc.LoadFromFile(m_sProfilesPath + "widgetdb_classes." + sName + ".xml");

  const rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  tResult.sName = sName;

  const rise::xml::CXMLNode& rNodeWidgets = rNodeRoot.Subnode("Classes");

  for (rise::xml::CXMLNode::TXMLNodeConstIterator itNodeWidget = rNodeWidgets.NodeBegin();
      itNodeWidget != rNodeWidgets.NodeEnd(); ++itNodeWidget)
  {
    const rise::xml::CXMLNode& rNodeWidget = *itNodeWidget;
    SWidget tWidget;
    tWidget.sName = rNodeWidget["Name"].AsString();
    tWidget.sDescr = rNodeWidget["Descr"].AsString();
    tResult.lsWidgets.push_back(tWidget);
  }

  return tResult;  // result
}

void CProfileAdminImpl::SetProfile(const ::webapp::admin::SProfile& rProfile)
{
  rise::xml::CXMLDocument tDoc;

  rise::xml::CXMLNode& rNodeRoot = tDoc.GetRoot();

  rNodeRoot.NodeName() = "WidgetDB";
  rNodeRoot.AddAttribute("version", "1.0");
  rNodeRoot.AddAttribute("type", "classes");

  rise::xml::CXMLNode& rNodeWidgets = rNodeRoot.AddSubNode("Classes");

  for (TWidgetList::const_iterator itWidget = rProfile.lsWidgets.begin();
      itWidget != rProfile.lsWidgets.end(); ++itWidget)
  {
    rise::xml::CXMLNode& rNodeWidget = rNodeWidgets.AddSubNode("Class");

    rNodeWidget.AddSubNode("Name").NodeContent() = itWidget->sName;
    rNodeWidget.AddSubNode("Descr").NodeContent() = itWidget->sDescr;
  }

  tDoc.SaveToFile(m_sProfilesPath + "widgetdb_classes." + rProfile.sName + ".xml");
}

std::string CProfileAdminImpl::m_sProfilesPath = staff::CRuntime::Inst().GetComponentHome("widget") + "/db/";
}
}

