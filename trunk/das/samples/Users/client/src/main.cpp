// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <iostream>
#include <memory>
#include <staff/utils/Log.h>
#include <staff/common/Exception.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include "Users.h"

std::ostream& operator<<(std::ostream& rOut, const staff::das::samples::User& rstUser)
{
  return rOut << "\t" << rstUser.nId << "  \t  " << rstUser.sName << "  \t  " << rstUser.sDescr;
}

template<typename Item>
std::ostream& operator<<(std::ostream& rOut, const std::list<Item>& rlsList)
{
  for (typename std::list<Item>::const_iterator itItem = rlsList.begin(); itItem != rlsList.end(); ++itItem)
  {
    std::cout << *itItem << "\n";
  }
  return rOut;
}

int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  try
  {
    std::auto_ptr< ::staff::das::samples::Users > pUsers(::staff::ServiceFactory::Inst().GetService< ::staff::das::samples::Users >());

    STAFF_ASSERT(pUsers.get(), "Cannot get client for service staff.das.samples.Users!");


    // cleanup after unclean shutdown
    pUsers->RemoveByName("john"); // for test

    staff::das::samples::StringList lsUserNames;
    lsUserNames.push_back("mary");
    for (int nNum = 1; nNum <= 5; ++nNum)
    {
      lsUserNames.push_back("user_" + staff::ToString(nNum));
    }

    pUsers->RemoveByNameList(lsUserNames);


    // get and show users list
    ::staff::das::samples::UsersList lsUsers = pUsers->GetAllUsers();
    std::cout << "users list: \n\tid   \t  name   \t  descr\n";
    std::cout << lsUsers << "\n";


    // add 2 new users
    LogInfo() << "adding john..";
    int nJohnId = pUsers->Add("john", "secret", "John Smitt");
    LogInfo() << "john's id: " << nJohnId;

    LogInfo() << "adding mary..";
    staff::das::samples::UserToAdd stUser;
    stUser.sName = "mary";
    stUser.sPassword = "pwd123";
    stUser.sDescr = "Mary";
    int nMaryId = pUsers->AddStruct(stUser);
    LogInfo() << "mary's id: " << nMaryId;


    // get and show users list
    lsUsers = pUsers->GetAllUsers();
    std::cout << "now users list is: \n\tid   \t  name   \t  descr\n";
    std::cout << lsUsers << "\n";


    LogInfo() << "adding 5 test users within 1 operation..";
    // test multiple users insert
    staff::das::samples::UserToAddList lsUsersToAdd;
    for (int nNum = 1; nNum <= 5; ++nNum)
    {
      staff::das::samples::UserToAdd stUser;
      stUser.sName = "user_" + staff::ToString(nNum);
      stUser.sPassword = "test_pwd";
      stUser.sDescr = "Multiple insert test user No " + staff::ToString(nNum);
      lsUsersToAdd.push_back(stUser);
    }

    staff::das::samples::IntList lsInsertedUsersIds = pUsers->AddList(lsUsersToAdd);
    std::cout << "inserted users ids: " << lsInsertedUsersIds << "\n";


    // get and show users list
    lsUsers = pUsers->GetAllUsers();
    std::cout << "now users list is: \n\tid   \t  name   \t  descr\n";
    std::cout << lsUsers << "\n";


    // remove users
    LogInfo() << "getting john's id by name";
    nJohnId = pUsers->GetUserIdByName("john"); // for test
    LogInfo() << "removing john";
    pUsers->Remove(nJohnId);

    LogInfo() << "getting mary's id by name";
    nMaryId = pUsers->GetUserIdByName("mary"); // for test
    LogInfo() << "removing mary";
    pUsers->Remove(nMaryId);


    LogInfo() << "removing users list";
    pUsers->RemoveList(lsInsertedUsersIds);
  }
  catch(const staff::RemoteException& rEx)
  {
    LogError() << rEx.GetDescr();
  }
  STAFF_CATCH_ALL

  return 0;
}
