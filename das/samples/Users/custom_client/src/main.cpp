// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <stdio.h>
#include <iostream>
#include <staff/utils/SharedPtr.h>
#include <staff/utils/stringutils.h>
#include <staff/utils/Log.h>
#include <staff/common/Exception.h>
#include <staff/utils/console.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/client/ServiceFactory.h>
#include "DataAccessService.h"

int main(int nArgs, const char* paszArgs[])
{
  try
  {
    {
      SharedPtr< ::staff::das::DataAccessService > pDataAccessService = 
        ::staff::ServiceFactory::Inst().GetService< ::staff::das::DataAccessService >();

      STAFF_ASSERT(pDataAccessService, "Cannot get client for service staff.das.DataAccessService!");

      // Invoke Your service here:
      std::cout << "Providers: \n";
      ::staff::das::StringList lsProviders = pDataAccessService->GetProviders();
      for (::staff::das::StringList::const_iterator itProvider = lsProviders.begin();
          itProvider != lsProviders.end(); ++itProvider)
      {
        std::cout << "  - " << *itProvider << "\n";
      }


      std::cout << "DataSources: \n";
      ::staff::das::StringList lsDataSources = pDataAccessService->GetDataSources();
      for (::staff::das::StringList::const_iterator itDataSource = lsDataSources.begin();
          itDataSource != lsDataSources.end(); ++itDataSource)
      {
        std::cout << "  - " << *itDataSource << "\n";
      }

      pDataAccessService->SetDataSource("staff.das.samples.Users");
      staff::DataObject tdoInterface = pDataAccessService->GetInterface();

      std::cout << "\n\n----------------------\n" << tdoInterface.ToString() << "\n------------------------\n\n";

      staff::DataObject tdoRequest("GetAllUsers");
      staff::DataObject tdoResult = pDataAccessService->Invoke(tdoRequest);

      std::cout << "\nRESULT:\n----------------------\n" << tdoResult.ToString() << "\n------------------------\n\n";

      pDataAccessService->FreeDataSource();
    }
  }
  catch(const staff::RemoteException& rEx)
  {
    LogError() << rEx.GetDescr();
  }
  STAFF_CATCH_ALL
  
  return 0;
}
